// Generated by js_of_ocaml 2.8.4
(function(joo_global_object)
   {"use strict";
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_string(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    var caml_blit_bytes=caml_blit_string;
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return !/[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 128)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 224)
           {v = c - 12416;if(v < 128)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 240)
               {v = c - 925824;if(v < 2048 || v >= 55295 && v < 57344)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & -64)
                  ==
                  128
                  &&
                  c1
                  <
                  245)
                 {v = c2 - 63447168 + (c << 6);
                  if(v < 65536 || v > 1114111)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 65535)
          t += String.fromCharCode(55232 + (v >> 10),56320 + (v & 1023));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlString(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlString.prototype.toString = function(){return caml_to_js_string(this)};
    function caml_new_string(s){return new MlString(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.22507385850720138e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int_compare(a,b)
     {if(a < b)return -1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?-1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(!(total && a === b))
         if(a instanceof MlString)
          if(b instanceof MlString)
           {if(a !== b){var x=caml_string_compare(a,b);if(x != 0)return x}}
          else
           return 1;
         else
          if(a instanceof Array && a[0] === (a[0] | 0))
           {var ta=a[0];
            if(ta === 254)ta = 0;
            if(ta === 250)
             {a = a[1];continue}
            else
             if(b instanceof Array && b[0] === (b[0] | 0))
              {var tb=b[0];
               if(tb === 254)tb = 0;
               if(tb === 250)
                {b = b[1];continue}
               else
                if(ta != tb)
                 return ta < tb?-1:1;
                else
                 switch(ta)
                  {case 248:
                    var x=caml_int_compare(a[2],b[2]);if(x != 0)return x;break;
                   case 251:caml_invalid_argument("equal: abstract value");
                   case 255:
                    var x=caml_int64_compare(a,b);if(x != 0)return x;break;
                   default:
                    if(a.length != b.length)return a.length < b.length?-1:1;
                    if(a.length > 1)stack.push(a,b,1)}}
             else
              return 1}
          else
           if
            (b instanceof MlString
             ||
             b instanceof Array
             &&
             b[0]
             ===
             (b[0] | 0))
            return -1;
           else
            if(typeof a != "number" && a && a.compare)
             return a.compare(b,total);
            else
             if(typeof a == "function")
              caml_invalid_argument("equal: functional value");
             else
              {if(a < b)return -1;
               if(a > b)return 1;
               if(a != b)
                {if(!total)return NaN;if(a == a)return 1;if(b == b)return -1}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlString(len?2:9,"",len)}
    function caml_equal(x,y){return +(caml_compare_val(x,y,false) == 0)}
    function caml_fill_string(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    var caml_fill_bytes=caml_fill_string;
    function caml_bytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_parse_format(fmt)
     {fmt = caml_bytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:-1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_format_float(fmt,x)
     {var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == -Infinity){f.sign = -1;x = -x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(!isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = x.toFixed(prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+s.slice(j + 1);
           if(exp < -4 || x >= 1e+21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_bytes_of_string(fmt) == "%d")return caml_new_string("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = -1;i = -i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_greaterequal(x,y)
     {return +(caml_compare_val(x,y,false) >= 0)}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 128)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 2048)
         {t += String.fromCharCode(192 | c >> 6);
          t += String.fromCharCode(128 | c & 63)}
        else
         if(c < 55296 || c >= 57343)
          t
          +=
          String.fromCharCode(224 | c >> 12,128 | c >> 6 & 63,128 | c & 63);
         else
          if
           (c
            >=
            56319
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            56320
            ||
            d
            >
            57343)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 56613888;
            t
            +=
            String.fromCharCode
             (240 | c >> 18,128 | c >> 12 & 63,128 | c >> 6 & 63,128 | c & 63)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(!caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlString(tag,s,s.length)}
    function caml_hexstring_of_float(x,prec,style)
     {if(!isFinite(x))
       {if(isNaN(x))return caml_js_to_string("nan");
        return caml_js_to_string(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == -Infinity?1:x >= 0?0:1;
      if(sign)x = -x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > -1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_js_to_string
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return (x[3] | x[2] | x[1]) == 0}
    function caml_int64_of_int32(x)
     {return [255,x & 16777215,x >> 24 & 16777215,x >> 31 & 65535]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_int64_sub(x,y)
     {var
       z1=x[1] - y[1],
       z2=x[2] - y[2] + (z1 >> 24),
       z3=x[3] - y[3] + (z2 >> 24);
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    function caml_int64_ucompare(x,y)
     {if(x[3] > y[3])return 1;
      if(x[3] < y[3])return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 16777215;
      x[1] = x[1] << 1 & 16777215}
    function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 16777215;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 16777215;
      x[3] = x[3] >>> 1}
    function caml_int64_udivmod(x,y)
     {var
       offset=0,
       modulus=caml_obj_dup(x),
       divisor=caml_obj_dup(y),
       quotient=[255,0,0,0];
      while(caml_int64_ucompare(modulus,divisor) > 0)
       {offset++;caml_int64_lsl1(divisor)}
      while(offset >= 0)
       {offset--;
        caml_int64_lsl1(quotient);
        if(caml_int64_ucompare(modulus,divisor) >= 0)
         {quotient[1]++;modulus = caml_int64_sub(modulus,divisor)}
        caml_int64_lsr1(divisor)}
      return [0,quotient,modulus]}
    function caml_int64_to_int32(x){return x[1] | x[2] << 24}
    function caml_int64_is_negative(x){return x[3] << 16 < 0}
    function caml_int64_neg(x)
     {var y1=-x[1],y2=-x[2] + (y1 >> 24),y3=-x[3] + (y2 >> 24);
      return [255,y1 & 16777215,y2 & 16777215,y3 & 65535]}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = -1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer}
      while
       (!caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_ml_string_length(s){return s.l}
    function caml_parse_sign_and_base(s)
     {var
       i=0,
       len=caml_ml_string_length(s),
       base=10,
       sign=len > 0 && caml_string_unsafe_get(s,0) == 45?(i++,-1):1;
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return -1}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=-1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_export_var()
     {return typeof module !== "undefined" && module && module.exports
              ?module.exports
              :joo_global_object}
    function raw_array_cons(a,x)
     {var l=a.length,b=new Array(l + 1);
      b[0] = x;
      for(var i=1;i <= l;i++)b[i] = a[i - 1];
      return b}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {return caml_call_gen(f,raw_array_cons(arguments,this))}}
    function caml_lex_array(s)
     {s = caml_bytes_of_string(s);
      var l=s.length / 2,a=new Array(l);
      for(var i=0;i < l;i++)
       a[i]
       =
       (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8)
       <<
       16
       >>
       16;
      return a}
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    function caml_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5;
      if(!tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      var c,state=start_state,buffer=caml_array_of_string(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = -1}
      else
       state = -state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)return -base - 1;
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return -state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        state
        =
        tbl.lex_check[base + c] == state
         ?tbl.lex_trans[base + c]
         :tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == -1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         if(c == 256)lexbuf[lex_eof_reached] = 0}}
    function caml_ml_bytes_length(s){return s.l}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_ml_flush(oc)
     {if(!oc.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(oc.buffer == "")return 0;
      if(oc.output)
       switch(oc.output.length)
        {case 2:oc.output(oc,oc.buffer);break;default:oc.output(oc.buffer)}
      oc.buffer = "";
      return 0}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlString(len?2:9,"",len)}
    var file_inode=0;
    function unix_gettimeofday(){return new Date().getTime() / 1e3}
    function unix_time(){return Math.floor(unix_gettimeofday())}
    function MlFile(content)
     {this.data = content;
      this.inode = file_inode++;
      var now=unix_time();
      this.atime = now;
      this.mtime = now;
      this.ctime = now}
    MlFile.prototype
    =
    {truncate:function(){this.data = caml_create_string(0);this.modified()},
     modified:
     function(){var now=unix_time();this.atime = now;this.mtime = now}};
    function caml_raise_no_such_file(name)
     {name = name instanceof MlString?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    var caml_current_dir="/";
    function caml_make_path(name)
     {name = name instanceof MlString?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function MlDir()
     {this.content = {};
      this.inode = file_inode++;
      var now=unix_time();
      this.atime = now;
      this.mtime = now;
      this.ctime = now}
    MlDir.prototype
    =
    {exists:function(name){return this.content[name]?1:0},
     mk:function(name,c){this.content[name] = c},
     get:function(name){return this.content[name]},
     list:function(){var a=[];for(var n in this.content)a.push(n);return a},
     remove:function(name){delete this.content[name]}};
    var caml_root_dir=new MlDir();
    caml_root_dir.mk("",new MlDir());
    function caml_fs_content(path)
     {var dir=caml_root_dir;
      for(var i=0;i < path.length;i++)
       {if(!(dir.exists && dir.exists(path[i])))
         caml_raise_no_such_file(path.orig);
        dir = dir.get(path[i])}
      return dir}
    function caml_sys_is_directory(name)
     {var path=caml_make_path(name),dir=caml_fs_content(path);
      return dir instanceof MlDir?1:0}
    function caml_string_of_array(a){return new MlString(4,a,a.length)}
    function caml_fs_register(name,content)
     {var path=caml_make_path(name),dir=caml_root_dir;
      for(var i=0;i < path.length - 1;i++)
       {var d=path[i];
        if(!dir.exists(d))dir.mk(d,new MlDir());
        dir = dir.get(d);
        if(!(dir instanceof MlDir))
         caml_raise_sys_error(path.orig + " : file already exists")}
      var d=path[path.length - 1];
      if(dir.exists(d))
       caml_raise_sys_error(path.orig + " : file already exists");
      if(content instanceof MlDir)
       dir.mk(d,content);
      else
       if(content instanceof MlFile)
        dir.mk(d,content);
       else
        if(content instanceof MlString)
         dir.mk(d,new MlFile(content));
        else
         if(content instanceof Array)
          dir.mk(d,new MlFile(caml_string_of_array(content)));
         else
          if(content.toString)
           {var mlstring=caml_new_string(content.toString());
            dir.mk(d,new MlFile(mlstring))}
          else
           caml_invalid_argument("caml_fs_register");
      return 0}
    function caml_sys_file_exists(name)
     {var dir=caml_root_dir,path=caml_make_path(name),auto_load,pos;
      for(var i=0;i < path.length;i++)
       {if(dir.auto){auto_load = dir.auto;pos = i}
        if(!(dir.exists && dir.exists(path[i])))
         return auto_load?auto_load(path,pos):0;
        dir = dir.get(path[i])}
      return 1}
    function caml_sys_open_internal(idx,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?caml_ml_string_length(file.data):0;
      info.flags = flags;
      caml_global_data.fds[idx] = info;
      caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      var name2=name.toString(),path=caml_make_path(name);
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name2 + " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name2 + " : flags Open_text and Open_binary are not compatible");
      if(caml_sys_file_exists(name))
       {if(caml_sys_is_directory(name))
         caml_raise_sys_error(name2 + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(name2 + " : file already exists");
        var
         idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0,
         file=caml_fs_content(path);
        if(f.truncate)file.truncate();
        return caml_sys_open_internal(idx + 1,file,f)}
      else
       if(f.create)
        {var idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
         caml_fs_register(name,caml_create_string(0));
         var file=caml_fs_content(path);
         return caml_sys_open_internal(idx + 1,file,f)}
       else
        caml_raise_no_such_file(name)}
    caml_sys_open_internal(0,new MlFile(caml_create_string(0)));
    caml_sys_open_internal(1,new MlFile(caml_create_string(0)));
    caml_sys_open_internal(2,new MlFile(caml_create_string(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      return {file:data.file,offset:data.offset,fd:fd,opened:true,refill:null}}
    function js_print_stderr(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    var caml_ml_out_channels=new Array();
    function caml_std_output(chan,s)
     {var
       str=caml_new_string(s),
       slen=caml_ml_string_length(str),
       clen=caml_ml_string_length(chan.file.data),
       offset=chan.offset;
      if(offset + slen >= clen)
       {var new_str=caml_create_string(offset + slen);
        caml_blit_string(chan.file.data,0,new_str,0,clen);
        caml_blit_string(str,0,new_str,offset,slen);
        chan.file.data = new_str}
      chan.offset += slen;
      chan.file.modified();
      return 0}
    function caml_ml_open_descriptor_out(fd)
     {var output;
      switch(fd)
       {case 1:output = js_print_stdout;break;
        case 2:output = js_print_stderr;break;
        default:output = caml_std_output}
      var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         buffer:"",
         output:output};
      caml_ml_out_channels[channel.fd] = channel;
      return channel}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_out_channels.length;c++)
       if(caml_ml_out_channels[c] && caml_ml_out_channels[c].opened)
        l = [0,caml_ml_out_channels[c],l];
      return l}
    function caml_ml_output(oc,buffer,offset,len)
     {if(!oc.opened)caml_raise_sys_error("Cannot output to a closed channel");
      var string;
      if(offset == 0 && caml_ml_string_length(buffer) == len)
       string = buffer;
      else
       {string = caml_create_string(len);
        caml_blit_string(buffer,offset,string,0,len)}
      var jsstring=string.toString(),id=jsstring.lastIndexOf("\n");
      if(id < 0)
       oc.buffer += jsstring;
      else
       {oc.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(oc);
        oc.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output_char(oc,c)
     {var s=caml_new_string(String.fromCharCode(c));
      caml_ml_output(oc,s,0,1);
      return 0}
    function caml_notequal(x,y){return +(caml_compare_val(x,y,false) != 0)}
    function caml_obj_tag(x)
     {return x instanceof Array?x[0]:x instanceof MlString?252:1e3}
    function caml_register_global(n,v,name_opt)
     {caml_global_data[n + 1] = v;if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_bytes_of_string(nm)] = v;return 0}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_string_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_sys_const_max_wosize(){return 2147483647 / 4 | 0}
    function caml_sys_exit(code)
     {var g=joo_global_object;
      if(g.quit)g.quit(code);
      if(g.process && g.process.exit)g.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error)
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     zero_pos=[0,caml_new_string(""),1,0,0],
     s=caml_new_string("Buffer.add: cannot grow buffer"),
     fmt=
      [0,
       [11,
        caml_new_string
         ("Internal failure -- please contact the parser generator's developers.\n"),
        [10,0]],
       caml_new_string
        ("Internal failure -- please contact the parser generator's developers.\n%!")],
     v=[1,[0,1]],
     v$0=[1,0],
     v$1=[1,[0,0]],
     reservedWords=
      [0,
       [0,caml_new_string("fun"),16],
       [0,
        [0,caml_new_string("true"),0],
        [0,
         [0,caml_new_string("false"),17],
         [0,
          [0,caml_new_string("int"),14],
          [0,
           [0,caml_new_string("bool"),21],
           [0,
            [0,caml_new_string("shift"),4],
            [0,
             [0,caml_new_string("reset"),8],
             [0,
              [0,caml_new_string("if"),15],
              [0,
               [0,caml_new_string("then"),1],
               [0,[0,caml_new_string("else"),18],0]]]]]]]]]],
     ocaml_lex_tables=
      [0,
       caml_new_string
        ("\0\0\xf0\xff\x1c\0\xf2\xff\xf3\xff\xf4\xff\xf5\xff\xf6\xff\0\0\x01\0\xfb\xff\xfc\xff\xfd\xffg\0\x04\0\xf9\xff\xf8\xff"),
       caml_new_string
        ("\xff\xff\xff\xff\x0e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\x05\0\xff\xff\xff\xff\xff\xff\x01\0\0\0\xff\xff\xff\xff"),
       caml_new_string
        ("\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0"),
       caml_new_string
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0e\0\x0e\0\0\0\x0e\0\x0e\0\x0e\0\0\0\x0e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0e\0\0\0\0\0\0\0\x0e\0\0\0\0\0\0\0\f\0\x0b\0\x05\0\x06\0\0\0\b\0\0\0\x07\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\n\0\t\0\x0f\0\0\0\x10\0\x04\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\0\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
       caml_new_string
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\x0e\0\x0e\0\xff\xff\x0e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\x0e\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\xff\xff\b\0\0\0\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\xff\xff\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_new_string(""),
       caml_new_string(""),
       caml_new_string(""),
       caml_new_string(""),
       caml_new_string(""),
       caml_new_string("")];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _c_=caml_new_string("true"),
     _d_=caml_new_string("false"),
     _b_=caml_new_string("char_of_int"),
     _e_=[0,caml_new_string("list.ml"),227,11],
     _f_=caml_new_string("\\\\"),
     _g_=caml_new_string("\\'"),
     _h_=caml_new_string("\\b"),
     _i_=caml_new_string("\\t"),
     _j_=caml_new_string("\\n"),
     _k_=caml_new_string("\\r"),
     _n_=caml_new_string("String.blit / Bytes.blit_string"),
     _m_=caml_new_string("Bytes.blit"),
     _l_=caml_new_string("String.sub / Bytes.sub"),
     _s_=caml_new_string("Set.remove_min_elt"),
     _t_=[0,0,0,0],
     _u_=[0,0,0],
     _v_=[0,caml_new_string("set.ml"),405,18],
     _o_=caml_new_string("Set.bal"),
     _p_=caml_new_string("Set.bal"),
     _q_=caml_new_string("Set.bal"),
     _r_=caml_new_string("Set.bal"),
     _B_=caml_new_string("Map.remove_min_elt"),
     _C_=[0,0,0,0],
     _D_=[0,caml_new_string("map.ml"),274,10],
     _E_=[0,0,0],
     _x_=caml_new_string("Map.bal"),
     _y_=caml_new_string("Map.bal"),
     _z_=caml_new_string("Map.bal"),
     _A_=caml_new_string("Map.bal"),
     _O_=caml_new_string("%c"),
     _P_=caml_new_string("%s"),
     _Q_=caml_new_string("%i"),
     _R_=caml_new_string("%li"),
     _S_=caml_new_string("%ni"),
     _T_=caml_new_string("%Li"),
     _U_=caml_new_string("%f"),
     _V_=caml_new_string("%B"),
     _W_=caml_new_string("%{"),
     _X_=caml_new_string("%}"),
     _Y_=caml_new_string("%("),
     _Z_=caml_new_string("%)"),
     ___=caml_new_string("%a"),
     _$_=caml_new_string("%t"),
     _aa_=caml_new_string("%?"),
     _ab_=caml_new_string("%r"),
     _ac_=caml_new_string("%_r"),
     _ad_=[0,caml_new_string("camlinternalFormat.ml"),845,23],
     _ao_=[0,caml_new_string("camlinternalFormat.ml"),809,21],
     _ag_=[0,caml_new_string("camlinternalFormat.ml"),810,21],
     _ap_=[0,caml_new_string("camlinternalFormat.ml"),813,21],
     _ah_=[0,caml_new_string("camlinternalFormat.ml"),814,21],
     _aq_=[0,caml_new_string("camlinternalFormat.ml"),817,19],
     _ai_=[0,caml_new_string("camlinternalFormat.ml"),818,19],
     _ar_=[0,caml_new_string("camlinternalFormat.ml"),821,22],
     _aj_=[0,caml_new_string("camlinternalFormat.ml"),822,22],
     _as_=[0,caml_new_string("camlinternalFormat.ml"),826,30],
     _ak_=[0,caml_new_string("camlinternalFormat.ml"),827,30],
     _am_=[0,caml_new_string("camlinternalFormat.ml"),831,26],
     _ae_=[0,caml_new_string("camlinternalFormat.ml"),832,26],
     _an_=[0,caml_new_string("camlinternalFormat.ml"),841,28],
     _af_=[0,caml_new_string("camlinternalFormat.ml"),842,28],
     _al_=[0,caml_new_string("camlinternalFormat.ml"),846,23],
     _bp_=caml_new_string("%u"),
     _bn_=[0,caml_new_string("camlinternalFormat.ml"),1520,4],
     _bo_=caml_new_string("Printf: bad conversion %["),
     _bq_=[0,caml_new_string("camlinternalFormat.ml"),1588,39],
     _br_=[0,caml_new_string("camlinternalFormat.ml"),1611,31],
     _bs_=[0,caml_new_string("camlinternalFormat.ml"),1612,31],
     _bt_=caml_new_string("Printf: bad conversion %_"),
     _bu_=caml_new_string("@{"),
     _bv_=caml_new_string("@["),
     _bw_=caml_new_string("@{"),
     _bx_=caml_new_string("@["),
     _bl_=caml_new_string("nan"),
     _bm_=caml_new_string("."),
     _bj_=caml_new_string("neg_infinity"),
     _bk_=caml_new_string("infinity"),
     _bi_=caml_new_string("%.12g"),
     _a7_=caml_new_string("%nd"),
     _a8_=caml_new_string("%+nd"),
     _a9_=caml_new_string("% nd"),
     _a__=caml_new_string("%ni"),
     _a$_=caml_new_string("%+ni"),
     _ba_=caml_new_string("% ni"),
     _bb_=caml_new_string("%nx"),
     _bc_=caml_new_string("%#nx"),
     _bd_=caml_new_string("%nX"),
     _be_=caml_new_string("%#nX"),
     _bf_=caml_new_string("%no"),
     _bg_=caml_new_string("%#no"),
     _bh_=caml_new_string("%nu"),
     _aU_=caml_new_string("%ld"),
     _aV_=caml_new_string("%+ld"),
     _aW_=caml_new_string("% ld"),
     _aX_=caml_new_string("%li"),
     _aY_=caml_new_string("%+li"),
     _aZ_=caml_new_string("% li"),
     _a0_=caml_new_string("%lx"),
     _a1_=caml_new_string("%#lx"),
     _a2_=caml_new_string("%lX"),
     _a3_=caml_new_string("%#lX"),
     _a4_=caml_new_string("%lo"),
     _a5_=caml_new_string("%#lo"),
     _a6_=caml_new_string("%lu"),
     _aH_=caml_new_string("%Ld"),
     _aI_=caml_new_string("%+Ld"),
     _aJ_=caml_new_string("% Ld"),
     _aK_=caml_new_string("%Li"),
     _aL_=caml_new_string("%+Li"),
     _aM_=caml_new_string("% Li"),
     _aN_=caml_new_string("%Lx"),
     _aO_=caml_new_string("%#Lx"),
     _aP_=caml_new_string("%LX"),
     _aQ_=caml_new_string("%#LX"),
     _aR_=caml_new_string("%Lo"),
     _aS_=caml_new_string("%#Lo"),
     _aT_=caml_new_string("%Lu"),
     _au_=caml_new_string("%d"),
     _av_=caml_new_string("%+d"),
     _aw_=caml_new_string("% d"),
     _ax_=caml_new_string("%i"),
     _ay_=caml_new_string("%+i"),
     _az_=caml_new_string("% i"),
     _aA_=caml_new_string("%x"),
     _aB_=caml_new_string("%#x"),
     _aC_=caml_new_string("%X"),
     _aD_=caml_new_string("%#X"),
     _aE_=caml_new_string("%o"),
     _aF_=caml_new_string("%#o"),
     _aG_=caml_new_string("%u"),
     _G_=caml_new_string("@]"),
     _H_=caml_new_string("@}"),
     _I_=caml_new_string("@?"),
     _J_=caml_new_string("@\n"),
     _K_=caml_new_string("@."),
     _L_=caml_new_string("@@"),
     _M_=caml_new_string("@%"),
     _N_=caml_new_string("@"),
     _at_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _by_=caml_new_string("Js.Error"),
     _bA_=caml_new_string("bool"),
     _bB_=caml_new_string("int"),
     _bC_=caml_new_string("unit"),
     _bD_=caml_new_string("?"),
     _bE_=caml_new_string("'x"),
     _bN_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _bF_=[0,[2,0,0],caml_new_string("%s")],
     _bM_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _bG_=[0,[2,0,0],caml_new_string("%s")],
     _bL_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _bH_=[0,[2,0,0],caml_new_string("%s")],
     _bK_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _bI_=[0,[2,0,0],caml_new_string("%s")],
     _bJ_=
      [0,
       [2,0,[12,47,[2,0,[11,caml_new_string(" -> "),[2,0,[12,47,[2,0,0]]]]]]],
       caml_new_string("%s/%s -> %s/%s")],
     _bz_=caml_new_string("'"),
     _bO_=caml_new_string("="),
     _bP_=caml_new_string("~"),
     _bR_=[0,caml_new_string("parser.ml"),284,10],
     _bS_=[0,caml_new_string("x")],
     _bT_=caml_new_string("x"),
     _bU_=[0,caml_new_string("parser.ml"),305,12],
     _bV_=[0,caml_new_string("parser.ml"),214,10],
     _bW_=[0,caml_new_string("parser.ml"),256,20],
     _bX_=[0,caml_new_string("parser.ml"),260,16],
     _bY_=[0,caml_new_string("parser.ml"),271,12],
     _bZ_=[0,caml_new_string("parser.ml"),95,10],
     _b0_=[0,caml_new_string("parser.ml"),114,12],
     _b1_=[0,caml_new_string("parser.ml"),127,10],
     _b2_=[0,caml_new_string("parser.ml"),169,20],
     _b3_=[0,caml_new_string("parser.ml"),173,16],
     _b4_=[0,caml_new_string("parser.ml"),184,12],
     _b5_=[0,caml_new_string("parser.ml"),338,8],
     _b6_=[0,caml_new_string("parser.ml"),366,8],
     _b7_=[0,caml_new_string("parser.ml"),394,8],
     _b8_=[0,caml_new_string("parser.ml"),422,8],
     _b9_=[0,caml_new_string("parser.ml"),450,8],
     _cb_=[0,caml_new_string("parser.ml"),533,10],
     _cc_=[0,caml_new_string("parser.ml"),551,16],
     _cd_=[0,caml_new_string("parser.ml"),555,12],
     _ce_=[0,caml_new_string("parser.ml"),502,10],
     _cf_=[0,caml_new_string("parser.ml"),520,16],
     _cg_=[0,caml_new_string("parser.ml"),524,12],
     _b__=[0,caml_new_string("parser.ml"),461,10],
     _ca_=[0,caml_new_string("parser.ml"),479,16],
     _b$_=[0,caml_new_string("parser.ml"),493,12],
     _co_=[0,caml_new_string("parser.ml"),586,10],
     _cp_=[0,caml_new_string("parser.ml"),608,12],
     _ch_=[0,caml_new_string("parser.ml"),614,10],
     _ck_=[0,caml_new_string("parser.ml"),709,24],
     _cl_=[0,caml_new_string("parser.ml"),713,20],
     _cj_=[0,caml_new_string("parser.ml"),724,16],
     _cm_=[0,caml_new_string("parser.ml"),658,20],
     _cn_=[0,caml_new_string("parser.ml"),662,16],
     _ci_=[0,caml_new_string("parser.ml"),731,12],
     _cq_=[0,caml_new_string("parser.ml"),743,4],
     _cr_=[0,caml_new_string("parser.ml"),1075,10],
     _cs_=[0,caml_new_string("parser.ml"),1100,12],
     _ct_=[0,caml_new_string("parser.ml"),1024,10],
     _cv_=[0,caml_new_string("parser.ml"),1052,16],
     _cu_=[0,caml_new_string("parser.ml"),1066,12],
     _cw_=[0,caml_new_string("parser.ml"),926,10],
     _cx_=[0,caml_new_string("parser.ml"),960,12],
     _cy_=[0,caml_new_string("parser.ml"),894,10],
     _cz_=[0,caml_new_string("parser.ml"),913,12],
     _cA_=[0,caml_new_string("parser.ml"),866,10],
     _cB_=[0,caml_new_string("parser.ml"),885,12],
     _cC_=[0,caml_new_string("parser.ml"),832,10],
     _cD_=[0,caml_new_string("parser.ml"),857,12],
     _cE_=[0,caml_new_string("parser.ml"),756,10],
     _cF_=[0,caml_new_string("parser.ml"),793,12],
     _cG_=[0,caml_new_string("parser.ml"),973,10],
     _cI_=[0,caml_new_string("parser.ml"),1011,16],
     _cH_=[0,caml_new_string("parser.ml"),1015,12],
     _cJ_=[0,caml_new_string("parser.ml"),1109,10],
     _cL_=[0,caml_new_string("parser.ml"),1133,20],
     _cM_=[0,caml_new_string("parser.ml"),1137,16],
     _cK_=[0,caml_new_string("parser.ml"),1169,12],
     _cN_=[0,caml_new_string("parser.ml"),1246,10],
     _cO_=[0,caml_new_string("parser.ml"),1305,12],
     _cP_=[0,caml_new_string("parser.ml"),1343,8],
     _cQ_=[0,caml_new_string("parser.ml"),1399,8],
     _cR_=[0,caml_new_string("parser.ml"),1410,10],
     _cS_=[0,caml_new_string("parser.ml"),1434,12],
     _cV_=[0,caml_new_string("parser.ml"),1721,20],
     _cW_=[0,caml_new_string("parser.ml"),1725,16],
     _cU_=[0,caml_new_string("parser.ml"),1736,12],
     _cX_=[0,caml_new_string("parser.ml"),1670,16],
     _cY_=[0,caml_new_string("parser.ml"),1674,12],
     _cT_=[0,caml_new_string("parser.ml"),1743,8],
     _cZ_=[0,caml_new_string("parser.ml"),1761,8],
     _c0_=[0,caml_new_string("parser.ml"),1807,8],
     _c1_=[0,caml_new_string("parser.ml"),1862,8],
     _c2_=[0,caml_new_string("parser.ml"),1903,8],
     _c3_=[0,caml_new_string("parser.ml"),1974,8],
     _bQ_=caml_new_string("Parser.Basics.Error"),
     _c$_=caml_new_string("error: generate_constraints_join"),
     _db_=caml_new_string("cannot unify: "),
     _da_=
      [0,
       [11,
        caml_new_string("variable '"),
        [2,0,[11,caml_new_string("' not found in the environment"),0]]],
       caml_new_string("variable '%s' not found in the environment")],
     _c__=caml_new_string("error"),
     _c9_=caml_new_string("error"),
     _c8_=caml_new_string("error"),
     _c7_=caml_new_string("error"),
     _c6_=caml_new_string("error"),
     _c5_=caml_new_string("error"),
     _c4_=caml_new_string("Typing.Type_error"),
     _dc_=
      [0,
       [11,caml_new_string("Failure: "),[2,0,0]],
       caml_new_string("Failure: %s")],
     _dd_=
      [0,
       [11,caml_new_string("Type_error: "),[2,0,0]],
       caml_new_string("Type_error: %s")];
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:var rest$8=fmt1[1];return [9,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$6=fmt1[1];
          return [13,pad$6,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$7=fmt1[1];
          return [14,pad$7,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function abs(x){return 0 <= x?x:-x | 0}
    function _a_(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return s}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    caml_ml_open_descriptor_in(0);
    caml_ml_open_descriptor_out(1);
    var oc=caml_ml_open_descriptor_out(2);
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function do_at_exit(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try {caml_ml_flush(a)}catch(_kO_){}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function exit(retcode){do_at_exit(0);return caml_sys_exit(retcode)}
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function rev_append(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    function map(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map(f,l)]}
      return 0}
    function fold_left(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function chop(k,l)
     {var k$0=k,l$0=l;
      for(;;)
       {if(0 === k$0)return l$0;
        if(l$0){var l$1=l$0[2],k$1=k$0 - 1 | 0,k$0=k$1,l$0=l$1;continue}
        throw [0,Assert_failure,_e_]}}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function sub_string(b,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(!((caml_ml_bytes_length(b) - len | 0) < ofs))
         {var r=caml_create_bytes(len);
          caml_blit_bytes(b,ofs,r,0,len);
          return r}
      return invalid_arg(_l_)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_bytes_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_m_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_n_)}
    function make$0(n,c){return make(n,c)}
    var
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    caml_fresh_oo_id(0);
    function engine(tbl,state,buf)
     {var result=caml_lex_engine(tbl,state,buf);
      if(0 <= result)
       {buf[11] = buf[12];
        var _kN_=buf[12];
        buf[12] = [0,_kN_[1],_kN_[2],_kN_[3],buf[4] + buf[6] | 0]}
      return result}
    function from_string(s)
     {var
       _kF_=[0],
       _kG_=1,
       _kH_=0,
       _kI_=0,
       _kJ_=0,
       _kK_=0,
       _kL_=0,
       _kM_=caml_ml_string_length(s),
       _kE_=copy(s);
      return [0,
              function(lexbuf){lexbuf[9] = 1;return 0},
              _kE_,
              _kM_,
              _kL_,
              _kK_,
              _kJ_,
              _kI_,
              _kH_,
              _kG_,
              _kF_,
              zero_pos,
              zero_pos]}
    function lexeme(lexbuf)
     {var len=lexbuf[6] - lexbuf[5] | 0;
      return sub_string(lexbuf[2],lexbuf[5],len)}
    function _w_(Ord)
     {function height(param){if(param){var h=param[4];return h}return 0}
      function create(l,v,r)
       {if(l)var h=l[4],hl=h;else var hl=0;
        if(r)var h$0=r[4],hr=h$0;else var hr=0;
        var _kD_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,v,r,_kD_]}
      function bal(l,v,r)
       {if(l)var h=l[4],hl=h;else var hl=0;
        if(r)var h$0=r[4],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[3],lv=l[2],ll=l[1],_ky_=height(lr);
            if(_ky_ <= height(ll))return create(ll,lv,create(lr,v,r));
            if(lr)
             {var lrr=lr[3],lrv=lr[2],lrl=lr[1],_kz_=create(lrr,v,r);
              return create(create(ll,lv,lrl),lrv,_kz_)}
            return invalid_arg(_o_)}
          return invalid_arg(_p_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[3],rv=r[2],rl=r[1],_kA_=height(rl);
            if(_kA_ <= height(rr))return create(create(l,v,rl),rv,rr);
            if(rl)
             {var rlr=rl[3],rlv=rl[2],rll=rl[1],_kB_=create(rlr,rv,rr);
              return create(create(l,v,rll),rlv,_kB_)}
            return invalid_arg(_q_)}
          return invalid_arg(_r_)}
        var _kC_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,v,r,_kC_]}
      function add(x,t)
       {if(t)
         {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return t;
          if(0 <= c){var rr=add(x,r);return r === rr?t:bal(l,v,rr)}
          var ll=add(x,l);
          return l === ll?t:bal(ll,v,r)}
        return [0,0,x,0,1]}
      function singleton(x){return [0,0,x,0,1]}
      function add_min_element(v,param)
       {if(param)
         {var r=param[3],x=param[2],l=param[1];
          return bal(add_min_element(v,l),x,r)}
        return singleton(v)}
      function add_max_element(v,param)
       {if(param)
         {var r=param[3],x=param[2],l=param[1];
          return bal(l,x,add_max_element(v,r))}
        return singleton(v)}
      function join(l,v,r)
       {if(l)
         {if(r)
           {var
             rh=r[4],
             rr=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[4],
             lr=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,join(lr,v,r))
                    :(lh + 2 | 0) < rh?bal(join(l,v,rl),rv,rr):create(l,v,r)}
          return add_max_element(v,l)}
        return add_min_element(v,r)}
      function min_elt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _kx_=param$0[1];
            if(_kx_){var param$0=_kx_;continue}
            var v=param$0[2];
            return v}
          throw Not_found}}
      function max_elt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _kv_=param$0[3],_kw_=param$0[2];
            if(_kv_){var param$0=_kv_;continue}
            return _kw_}
          throw Not_found}}
      function remove_min_elt(param)
       {if(param)
         {var _ku_=param[1];
          if(_ku_)
           {var r=param[3],v=param[2];return bal(remove_min_elt(_ku_),v,r)}
          var r$0=param[3];
          return r$0}
        return invalid_arg(_s_)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var _kt_=remove_min_elt(match);return join(t,min_elt(match),_kt_)}
          return t}
        return match}
      function split(x,param)
       {if(param)
         {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,1,r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,r)]}
        return _t_}
      var empty=0;
      function is_empty(param){return param?0:1}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _ks_=0 === c?1:0;
            if(_ks_)return _ks_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function remove(x,t)
       {if(t)
         {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)
           {if(l)
             {if(r){var _kr_=remove_min_elt(r);return bal(l,min_elt(r),_kr_)}
              return l}
            return r}
          if(0 <= c){var rr=remove(x,r);return r === rr?t:bal(l,v,rr)}
          var ll=remove(x,l);
          return l === ll?t:bal(ll,v,r)}
        return 0}
      function union(t1,match)
       {if(t1)
         {if(match)
           {var
             h2=match[4],
             r2=match[3],
             v2=match[2],
             l2=match[1],
             h1=t1[4],
             r1=t1[3],
             v1=t1[2],
             l1=t1[1];
            if(h2 <= h1)
             {if(1 === h2)return add(v2,t1);
              var
               match$0=split(v1,match),
               r2$0=match$0[3],
               l2$0=match$0[1],
               _kp_=union(r1,r2$0);
              return join(union(l1,l2$0),v1,_kp_)}
            if(1 === h1)return add(v1,match);
            var
             match$1=split(v2,t1),
             r1$0=match$1[3],
             l1$0=match$1[1],
             _kq_=union(r1$0,r2);
            return join(union(l1$0,l2),v2,_kq_)}
          return t1}
        return match}
      function inter(s1,match)
       {if(s1)
         {if(match)
           {var r1=s1[3],v1=s1[2],l1=s1[1],_kl_=split(v1,match),_km_=_kl_[1];
            if(0 === _kl_[2])
             {var r2=_kl_[3],_kn_=inter(r1,r2);
              return concat(inter(l1,_km_),_kn_)}
            var r2$0=_kl_[3],_ko_=inter(r1,r2$0);
            return join(inter(l1,_km_),v1,_ko_)}
          return 0}
        return 0}
      function diff(t1,match)
       {if(t1)
         {if(match)
           {var r1=t1[3],v1=t1[2],l1=t1[1],_kh_=split(v1,match),_ki_=_kh_[1];
            if(0 === _kh_[2])
             {var r2=_kh_[3],_kj_=diff(r1,r2);
              return join(diff(l1,_ki_),v1,_kj_)}
            var r2$0=_kh_[3],_kk_=diff(r1,r2$0);
            return concat(diff(l1,_ki_),_kk_)}
          return t1}
        return 0}
      function cons_enum(s,e)
       {var s$0=s,e$0=e;
        for(;;)
         {if(s$0)
           {var r=s$0[3],v=s$0[2],s$1=s$0[1],e$1=[0,v,r,e$0],s$0=s$1,e$0=e$1;
            continue}
          return e$0}}
      function compare(s1,s2)
       {var e2$2=cons_enum(s2,0),e1$2=cons_enum(s1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[3],
               r2=e2[2],
               v2=e2[1],
               e1$0=e1[3],
               r1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var
                 e2$1=cons_enum(r2,e2$0),
                 e1$1=cons_enum(r1,e1$0),
                 e1=e1$1,
                 e2=e2$1;
                continue}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(s1,s2){return 0 === compare(s1,s2)?1:0}
      function subset(s1,s2)
       {var s1$0=s1,s2$0=s2;
        for(;;)
         {if(s1$0)
           {if(s2$0)
             {var
               r2=s2$0[3],
               v2=s2$0[2],
               l2=s2$0[1],
               r1=s1$0[3],
               v1=s1$0[2],
               l1=s1$0[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var _ke_=subset(l1,l2);
                if(_ke_){var s1$0=r1,s2$0=r2;continue}
                return _ke_}
              if(0 <= c)
               {var _kf_=subset([0,0,v1,r1,0],r2);
                if(_kf_){var s1$0=l1;continue}
                return _kf_}
              var _kg_=subset([0,l1,v1,0,0],l2);
              if(_kg_){var s1$0=r1;continue}
              return _kg_}
            return 0}
          return 1}}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var param$1=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call1(f,v);
            var param$0=param$1;
            continue}
          return 0}}
      function fold(f,s,accu)
       {var s$0=s,accu$0=accu;
        for(;;)
         {if(s$0)
           {var
             s$1=s$0[3],
             v=s$0[2],
             l=s$0[1],
             accu$1=caml_call2(f,v,fold(f,l,accu$0)),
             s$0=s$1,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1],_kb_=caml_call1(p,v);
            if(_kb_)
             {var _kc_=for_all(p,l);
              if(_kc_){var param$0=r;continue}
              var _kd_=_kc_}
            else
             var _kd_=_kb_;
            return _kd_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1],_j__=caml_call1(p,v);
            if(_j__)
             var _j$_=_j__;
            else
             {var _ka_=exists(p,l);
              if(!_ka_){var param$0=r;continue}
              var _j$_=_ka_}
            return _j$_}
          return 0}}
      function filter(p,t)
       {if(t)
         {var
           r=t[3],
           v=t[2],
           l=t[1],
           l$0=filter(p,l),
           pv=caml_call1(p,v),
           r$0=filter(p,r);
          if(pv){if(l === l$0)if(r === r$0)return t;return join(l$0,v,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pv=caml_call1(p,v),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pv){var _j8_=concat(lf,rf);return [0,join(lt,v,rt),_j8_]}
          var _j9_=join(lf,v,rf);
          return [0,concat(lt,rt),_j9_]}
        return _u_}
      function cardinal(param)
       {if(param)
         {var r=param[3],l=param[1],_j7_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _j7_ | 0}
        return 0}
      function elements_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             param$1=param$0[1],
             accu$1=[0,v,elements_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=param$1;
            continue}
          return accu$0}}
      function elements(s){return elements_aux(0,s)}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return v;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function map(f,t)
       {if(t)
         {var
           r=t[3],
           v=t[2],
           l=t[1],
           l$0=map(f,l),
           v$0=caml_call1(f,v),
           r$0=map(f,r);
          if(l === l$0)if(v === v$0)if(r === r$0)return t;
          if(0 === l$0)
           var switch$0=0;
          else
           var _j6_=max_elt(l$0),switch$0=0 <= caml_call2(Ord[1],_j6_,v)?1:0;
          if(!switch$0)
           {if(0 === r$0)
             var switch$1=0;
            else
             var
              _j5_=min_elt(r$0),
              switch$1=0 <= caml_call2(Ord[1],v,_j5_)?1:0;
            if(!switch$1)return join(l$0,v$0,r$0)}
          return union(l$0,add(v$0,r$0))}
        return 0}
      function of_list(l)
       {if(l)
         {var _jM_=l[2],_jN_=l[1];
          if(_jM_)
           {var _jO_=_jM_[2],_jP_=_jM_[1];
            if(_jO_)
             {var _jQ_=_jO_[2],_jR_=_jO_[1];
              if(_jQ_)
               {var _jS_=_jQ_[2],_jT_=_jQ_[1];
                if(_jS_)
                 {if(_jS_[2])
                   {var
                     _jU_=Ord[1],
                     sort=
                      function(n,l)
                       {if(2 === n)
                         {if(l)
                           {var _j2_=l[2];
                            if(_j2_)
                             {var x2=_j2_[1],x1=l[1],c$0=caml_call2(_jU_,x1,x2);
                              return 0 === c$0
                                      ?[0,x1,0]
                                      :0 <= c$0?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]]}}}
                        else
                         if(3 === n)
                          if(l)
                           {var _j3_=l[2];
                            if(_j3_)
                             {var _j4_=_j3_[2];
                              if(_j4_)
                               {var
                                 x3=_j4_[1],
                                 x2$0=_j3_[1],
                                 x1$0=l[1],
                                 c$1=caml_call2(_jU_,x1$0,x2$0);
                                if(0 === c$1)
                                 {var c$2=caml_call2(_jU_,x2$0,x3);
                                  return 0 === c$2
                                          ?[0,x2$0,0]
                                          :0 <= c$2?[0,x3,[0,x2$0,0]]:[0,x2$0,[0,x3,0]]}
                                if(0 <= c$1)
                                 {var c$3=caml_call2(_jU_,x1$0,x3);
                                  if(0 === c$3)return [0,x2$0,[0,x1$0,0]];
                                  if(0 <= c$3)
                                   {var c$4=caml_call2(_jU_,x2$0,x3);
                                    return 0 === c$4
                                            ?[0,x2$0,[0,x1$0,0]]
                                            :0 <= c$4
                                              ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                                              :[0,x2$0,[0,x3,[0,x1$0,0]]]}
                                  return [0,x2$0,[0,x1$0,[0,x3,0]]]}
                                var c$5=caml_call2(_jU_,x2$0,x3);
                                if(0 === c$5)return [0,x1$0,[0,x2$0,0]];
                                if(0 <= c$5)
                                 {var c$6=caml_call2(_jU_,x1$0,x3);
                                  return 0 === c$6
                                          ?[0,x1$0,[0,x2$0,0]]
                                          :0 <= c$6
                                            ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                                            :[0,x1$0,[0,x3,[0,x2$0,0]]]}
                                return [0,x1$0,[0,x2$0,[0,x3,0]]]}}}
                        var
                         n1=n >> 1,
                         n2=n - n1 | 0,
                         l2$0=chop(n1,l),
                         l1$0=rev_sort(n1,l),
                         l2$1=rev_sort(n2,l2$0),
                         l1=l1$0,
                         l2=l2$1,
                         accu=0;
                        for(;;)
                         {if(l1)
                           {if(l2)
                             {var
                               t2=l2[2],
                               h2=l2[1],
                               t1=l1[2],
                               h1=l1[1],
                               c=caml_call2(_jU_,h1,h2);
                              if(0 === c)
                               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
                              if(0 < c){var accu$1=[0,h1,accu],l1=t1,accu=accu$1;continue}
                              var accu$2=[0,h2,accu],l2=t2,accu=accu$2;
                              continue}
                            return rev_append(l1,accu)}
                          return rev_append(l2,accu)}},
                     rev_sort=
                      function(n,l)
                       {if(2 === n)
                         {if(l)
                           {var _jZ_=l[2];
                            if(_jZ_)
                             {var x2=_jZ_[1],x1=l[1],c$0=caml_call2(_jU_,x1,x2);
                              return 0 === c$0
                                      ?[0,x1,0]
                                      :0 < c$0?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]]}}}
                        else
                         if(3 === n)
                          if(l)
                           {var _j0_=l[2];
                            if(_j0_)
                             {var _j1_=_j0_[2];
                              if(_j1_)
                               {var
                                 x3=_j1_[1],
                                 x2$0=_j0_[1],
                                 x1$0=l[1],
                                 c$1=caml_call2(_jU_,x1$0,x2$0);
                                if(0 === c$1)
                                 {var c$2=caml_call2(_jU_,x2$0,x3);
                                  return 0 === c$2
                                          ?[0,x2$0,0]
                                          :0 < c$2?[0,x2$0,[0,x3,0]]:[0,x3,[0,x2$0,0]]}
                                if(0 < c$1)
                                 {var c$3=caml_call2(_jU_,x2$0,x3);
                                  if(0 === c$3)return [0,x1$0,[0,x2$0,0]];
                                  if(0 < c$3)return [0,x1$0,[0,x2$0,[0,x3,0]]];
                                  var c$4=caml_call2(_jU_,x1$0,x3);
                                  return 0 === c$4
                                          ?[0,x1$0,[0,x2$0,0]]
                                          :0 < c$4
                                            ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                                            :[0,x3,[0,x1$0,[0,x2$0,0]]]}
                                var c$5=caml_call2(_jU_,x1$0,x3);
                                if(0 === c$5)return [0,x2$0,[0,x1$0,0]];
                                if(0 < c$5)return [0,x2$0,[0,x1$0,[0,x3,0]]];
                                var c$6=caml_call2(_jU_,x2$0,x3);
                                return 0 === c$6
                                        ?[0,x2$0,[0,x1$0,0]]
                                        :0 < c$6
                                          ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                                          :[0,x3,[0,x2$0,[0,x1$0,0]]]}}}
                        var
                         n1=n >> 1,
                         n2=n - n1 | 0,
                         l2$0=chop(n1,l),
                         l1$0=sort(n1,l),
                         l2$1=sort(n2,l2$0),
                         l1=l1$0,
                         l2=l2$1,
                         accu=0;
                        for(;;)
                         {if(l1)
                           {if(l2)
                             {var
                               t2=l2[2],
                               h2=l2[1],
                               t1=l1[2],
                               h1=l1[1],
                               c=caml_call2(_jU_,h1,h2);
                              if(0 === c)
                               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
                              if(0 <= c)
                               {var accu$1=[0,h2,accu],l2=t2,accu=accu$1;continue}
                              var accu$2=[0,h1,accu],l1=t1,accu=accu$2;
                              continue}
                            return rev_append(l1,accu)}
                          return rev_append(l2,accu)}},
                     len=length(l),
                     _jV_=2 <= len?sort(len,l):l,
                     sub=
                      function(n,l)
                       {if(!(3 < n >>> 0))
                         switch(n)
                          {case 0:return [0,0,l];
                           case 1:
                            if(l){var l$3=l[2],x0=l[1];return [0,[0,0,x0,0,1],l$3]}
                            break;
                           case 2:
                            if(l)
                             {var _jW_=l[2];
                              if(_jW_)
                               {var l$4=_jW_[2],x1=_jW_[1],x0$0=l[1];
                                return [0,[0,[0,0,x0$0,0,1],x1,0,2],l$4]}}
                            break;
                           default:
                            if(l)
                             {var _jX_=l[2];
                              if(_jX_)
                               {var _jY_=_jX_[2];
                                if(_jY_)
                                 {var l$5=_jY_[2],x2=_jY_[1],x1$0=_jX_[1],x0$1=l[1];
                                  return [0,[0,[0,0,x0$1,0,1],x1$0,[0,0,x2,0,1],2],l$5]}}}}
                        var nl=n / 2 | 0,match=sub(nl,l),l$0=match[2],left=match[1];
                        if(l$0)
                         {var
                           l$1=l$0[2],
                           mid=l$0[1],
                           match$0=sub((n - nl | 0) - 1 | 0,l$1),
                           l$2=match$0[2],
                           right=match$0[1];
                          return [0,create(left,mid,right),l$2]}
                        throw [0,Assert_failure,_v_]};
                    return sub(length(_jV_),_jV_)[1]}
                  var x4=_jS_[1];
                  return add(x4,add(_jT_,add(_jR_,add(_jP_,singleton(_jN_)))))}
                return add(_jT_,add(_jR_,add(_jP_,singleton(_jN_))))}
              return add(_jR_,add(_jP_,singleton(_jN_)))}
            return add(_jP_,singleton(_jN_))}
          return singleton(_jN_)}
        return empty}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              singleton,
              remove,
              union,
              inter,
              diff,
              compare,
              equal,
              subset,
              iter,
              map,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              elements,
              min_elt,
              max_elt,
              min_elt,
              split,
              find,
              of_list]}
    function _F_(Ord)
     {function height(param){if(param){var h=param[5];return h}return 0}
      function create(l,x,d,r)
       {var hl=height(l),hr=height(r),_jL_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_jL_]}
      function singleton(x,d){return [0,0,x,d,0,1]}
      function bal(l,x,d,r)
       {if(l)var h=l[5],hl=h;else var hl=0;
        if(r)var h$0=r[5],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_jG_=height(lr);
            if(_jG_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
            if(lr)
             {var
               lrr=lr[4],
               lrd=lr[3],
               lrv=lr[2],
               lrl=lr[1],
               _jH_=create(lrr,x,d,r);
              return create(create(ll,lv,ld,lrl),lrv,lrd,_jH_)}
            return invalid_arg(_x_)}
          return invalid_arg(_y_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_jI_=height(rl);
            if(_jI_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
            if(rl)
             {var
               rlr=rl[4],
               rld=rl[3],
               rlv=rl[2],
               rll=rl[1],
               _jJ_=create(rlr,rv,rd,rr);
              return create(create(l,x,d,rll),rlv,rld,_jJ_)}
            return invalid_arg(_z_)}
          return invalid_arg(_A_)}
        var _jK_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_jK_]}
      var empty=0;
      function is_empty(param){return param?0:1}
      function add(x,data,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return d === data?m:[0,l,x,data,r,h];
          if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=add(x,data,l);
          return l === ll?m:bal(ll,v,d,r)}
        return [0,0,x,data,0,1]}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return d;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _jF_=0 === c?1:0;
            if(_jF_)return _jF_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function min_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _jE_=param$0[1];
            if(_jE_){var param$0=_jE_;continue}
            var d=param$0[3],x=param$0[2];
            return [0,x,d]}
          throw Not_found}}
      function max_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _jB_=param$0[4],_jC_=param$0[3],_jD_=param$0[2];
            if(_jB_){var param$0=_jB_;continue}
            return [0,_jD_,_jC_]}
          throw Not_found}}
      function remove_min_binding(param)
       {if(param)
         {var _jA_=param[1];
          if(_jA_)
           {var r=param[4],d=param[3],x=param[2];
            return bal(remove_min_binding(_jA_),x,d,r)}
          var r$0=param[4];
          return r$0}
        return invalid_arg(_B_)}
      function remove(x$0,t)
       {if(t)
         {var r=t[4],d$0=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x$0,v);
          if(0 === c)
           {if(l)
             {if(r)
               {var match=min_binding(r),d=match[2],x=match[1];
                return bal(l,x,d,remove_min_binding(r))}
              return l}
            return r}
          if(0 <= c){var rr=remove(x$0,r);return r === rr?t:bal(l,v,d$0,rr)}
          var ll=remove(x$0,l);
          return l === ll?t:bal(ll,v,d$0,r)}
        return 0}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var param$1=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call2(f,v,d);
            var param$0=param$1;
            continue}
          return 0}}
      function map(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=map(f,l),
           d$0=caml_call1(f,d),
           r$0=map(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function mapi(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=mapi(f,l),
           d$0=caml_call2(f,v,d),
           r$0=mapi(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function fold(f,m,accu)
       {var m$0=m,accu$0=accu;
        for(;;)
         {if(m$0)
           {var
             m$1=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
             m$0=m$1,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _jx_=caml_call2(p,v,d);
            if(_jx_)
             {var _jy_=for_all(p,l);
              if(_jy_){var param$0=r;continue}
              var _jz_=_jy_}
            else
             var _jz_=_jx_;
            return _jz_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _ju_=caml_call2(p,v,d);
            if(_ju_)
             var _jv_=_ju_;
            else
             {var _jw_=exists(p,l);
              if(!_jw_){var param$0=r;continue}
              var _jv_=_jw_}
            return _jv_}
          return 0}}
      function add_min_binding(k,v,param)
       {if(param)
         {var r=param[4],d=param[3],x=param[2],l=param[1];
          return bal(add_min_binding(k,v,l),x,d,r)}
        return singleton(k,v)}
      function add_max_binding(k,v,param)
       {if(param)
         {var r=param[4],d=param[3],x=param[2],l=param[1];
          return bal(l,x,d,add_max_binding(k,v,r))}
        return singleton(k,v)}
      function join(l,v,d,r)
       {if(l)
         {if(r)
           {var
             rh=r[5],
             rr=r[4],
             rd=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[5],
             lr=l[4],
             ld=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,ld,join(lr,v,d,r))
                    :(lh + 2 | 0) < rh
                      ?bal(join(l,v,d,rl),rv,rd,rr)
                      :create(l,v,d,r)}
          return add_max_binding(v,d,l)}
        return add_min_binding(v,d,r)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return join(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function concat_or_join(t1,v,d,t2)
       {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
      function split(x,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,[0,d],r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,d,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,d,r)]}
        return _C_}
      function merge(f,s1,s2)
       {if(s1)
         {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
          if(height(s2) <= h1)
           {var
             match=split(v1,s2),
             r2=match[3],
             d2=match[2],
             l2=match[1],
             _jq_=merge(f,r1,r2),
             _jr_=caml_call3(f,v1,[0,d1],d2);
            return concat_or_join(merge(f,l1,l2),v1,_jr_,_jq_)}}
        else
         if(!s2)return 0;
        if(s2)
         {var
           r2$0=s2[4],
           d2$0=s2[3],
           v2=s2[2],
           l2$0=s2[1],
           match$0=split(v2,s1),
           r1$0=match$0[3],
           d1$0=match$0[2],
           l1$0=match$0[1],
           _js_=merge(f,r1$0,r2$0),
           _jt_=caml_call3(f,v2,d1$0,[0,d2$0]);
          return concat_or_join(merge(f,l1$0,l2$0),v2,_jt_,_js_)}
        throw [0,Assert_failure,_D_]}
      function union(f,s1,s2)
       {if(s1)
         {if(s2)
           {var
             h2=s2[5],
             r2=s2[4],
             d2=s2[3],
             v2=s2[2],
             l2=s2[1],
             h1=s1[5],
             r1=s1[4],
             d1=s1[3],
             v1=s1[2],
             l1=s1[1];
            if(h2 <= h1)
             {var
               match=split(v1,s2),
               r2$0=match[3],
               d2$0=match[2],
               l2$0=match[1],
               l=union(f,l1,l2$0),
               r=union(f,r1,r2$0);
              if(d2$0)
               {var d2$1=d2$0[1];
                return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
              return join(l,v1,d1,r)}
            var
             match$0=split(v2,s1),
             r1$0=match$0[3],
             d1$0=match$0[2],
             l1$0=match$0[1],
             l$0=union(f,l1$0,l2),
             r$0=union(f,r1$0,r2);
            if(d1$0)
             {var d1$1=d1$0[1];
              return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
            return join(l$0,v2,d2,r$0)}
          var s=s1}
        else
         var s=s2;
        return s}
      function filter(p,t)
       {if(t)
         {var
           r=t[4],
           d=t[3],
           v=t[2],
           l=t[1],
           l$0=filter(p,l),
           pvd=caml_call2(p,v,d),
           r$0=filter(p,r);
          if(pvd){if(l === l$0)if(r === r$0)return t;return join(l$0,v,d,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pvd=caml_call2(p,v,d),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pvd){var _jo_=concat(lf,rf);return [0,join(lt,v,d,rt),_jo_]}
          var _jp_=join(lf,v,d,rf);
          return [0,concat(lt,rt),_jp_]}
        return _E_}
      function cons_enum(m,e)
       {var m$0=m,e$0=e;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             m$1=m$0[1],
             e$1=[0,v,d,r,e$0],
             m$0=m$1,
             e$0=e$1;
            continue}
          return e$0}}
      function compare(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var c$0=caml_call2(cmp,d1,d2);
                if(0 === c$0)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                return c$0}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               _jl_=0 === caml_call2(Ord[1],v1,v2)?1:0;
              if(_jl_)
               {var _jm_=caml_call2(cmp,d1,d2);
                if(_jm_)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                var _jn_=_jm_}
              else
               var _jn_=_jl_;
              return _jn_}
            return 0}
          return e2?0:1}}
      function cardinal(param)
       {if(param)
         {var r=param[4],l=param[1],_jk_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _jk_ | 0}
        return 0}
      function bindings_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             param$1=param$0[1],
             accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=param$1;
            continue}
          return accu$0}}
      function bindings(s){return bindings_aux(0,s)}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              singleton,
              remove,
              merge,
              union,
              compare,
              equal,
              iter,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              bindings,
              min_binding,
              max_binding,
              min_binding,
              split,
              find,
              map,
              mapi]}
    function resize(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         {if(!((b[2] + more | 0) <= max_string_length))throw [0,Failure,s];
          new_len[1] = max_string_length}
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    var default_float_precision=-6;
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       y=buf[1] + overhead | 0,
       _ji_=len < y?1:0;
      if(_ji_)
       {var
         x=len * 2 | 0,
         new_len=caml_greaterequal(x,y)?x:y,
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _jj_=0}
      else
       var _jj_=_ji_;
      return _jj_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _G_;
         case 1:return _H_;
         case 2:return _I_;
         case 3:return _J_;
         case 4:return _K_;
         case 5:return _L_;
         default:return _M_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return _a_(_N_,make$0(1,c))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var fmtty$1=fmtty$0[1];
           buffer_add_string(buf,_O_);
           var fmtty$0=fmtty$1;
           continue;
          case 1:
           var fmtty$2=fmtty$0[1];
           buffer_add_string(buf,_P_);
           var fmtty$0=fmtty$2;
           continue;
          case 2:
           var fmtty$3=fmtty$0[1];
           buffer_add_string(buf,_Q_);
           var fmtty$0=fmtty$3;
           continue;
          case 3:
           var fmtty$4=fmtty$0[1];
           buffer_add_string(buf,_R_);
           var fmtty$0=fmtty$4;
           continue;
          case 4:
           var fmtty$5=fmtty$0[1];
           buffer_add_string(buf,_S_);
           var fmtty$0=fmtty$5;
           continue;
          case 5:
           var fmtty$6=fmtty$0[1];
           buffer_add_string(buf,_T_);
           var fmtty$0=fmtty$6;
           continue;
          case 6:
           var fmtty$7=fmtty$0[1];
           buffer_add_string(buf,_U_);
           var fmtty$0=fmtty$7;
           continue;
          case 7:
           var fmtty$8=fmtty$0[1];
           buffer_add_string(buf,_V_);
           var fmtty$0=fmtty$8;
           continue;
          case 8:
           var fmtty$9=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_W_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_X_);
           var fmtty$0=fmtty$9;
           continue;
          case 9:
           var fmtty$10=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_Y_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_Z_);
           var fmtty$0=fmtty$10;
           continue;
          case 10:
           var fmtty$11=fmtty$0[1];
           buffer_add_string(buf,___);
           var fmtty$0=fmtty$11;
           continue;
          case 11:
           var fmtty$12=fmtty$0[1];
           buffer_add_string(buf,_$_);
           var fmtty$0=fmtty$12;
           continue;
          case 12:
           var fmtty$13=fmtty$0[1];
           buffer_add_string(buf,_aa_);
           var fmtty$0=fmtty$13;
           continue;
          case 13:
           var fmtty$14=fmtty$0[1];
           buffer_add_string(buf,_ab_);
           var fmtty$0=fmtty$14;
           continue;
          default:
           var fmtty$15=fmtty$0[1];
           buffer_add_string(buf,_ac_);
           var fmtty$0=fmtty$15;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _iW_=function(param){return 0},
         _iX_=function(param){return 0},
         _iY_=function(param){return 0};
        return [0,function(param){return 0},_iY_,_iX_,_iW_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _iZ_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_iZ_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _i0_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _i0_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _i1_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _i1_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _i2_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _i2_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _i3_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _i3_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _i4_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _i4_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _i5_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _i5_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _i6_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _i6_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _i7_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _i7_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _i8_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _i9_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _i__=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _i__,
                  _i9_,
                  _i8_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _i$_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _i$_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _ja_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _ja_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _jb_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _jb_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _jc_=function(param){caml_call1(de$12,0);return 0},
           _jd_=function(param){caml_call1(ed$12,0);return 0},
           _je_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _je_,
                  _jd_,
                  _jc_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _jf_=function(param){caml_call1(de$13,0);return 0},
           _jg_=function(param){caml_call1(ed$13,0);return 0},
           _jh_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _jh_,
                  _jg_,
                  _jf_]}}
    function trans(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_ad_]}
      else
       switch(ty1[0])
        {case 0:
          var _iD_=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_iD_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _iE_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_iE_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _iF_=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_iF_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _iG_=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_iG_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _iH_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_iH_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _iI_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_iI_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _iJ_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_iJ_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _iK_=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_iK_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _iL_=ty1[2],_iM_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_iN_=trans(_iL_,rest2$7);
              return [8,trans(_iM_,ty2),_iN_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,_am_];
          break;
         case 9:
          var _iO_=ty1[3],_iP_=ty1[2],_iQ_=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_iP_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_iQ_,ty22,trans(_iO_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_an_];
          break;
         case 10:
          var _iR_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_iR_,rest2$9)]}
          throw [0,Assert_failure,_ao_];
         case 11:
          var _iS_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,trans(_iS_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_ap_];
          break;
         case 12:
          var _iT_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,trans(_iT_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_aq_];
          break;
         case 13:
          var _iU_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,trans(_iU_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_ar_];
          break;
         default:
          var _iV_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,trans(_iV_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_as_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ag_];
        case 1:throw [0,Assert_failure,_ah_];
        case 2:throw [0,Assert_failure,_ai_];
        case 3:throw [0,Assert_failure,_aj_];
        case 4:throw [0,Assert_failure,_ak_];
        case 5:throw [0,Assert_failure,_ae_];
        case 6:throw [0,Assert_failure,_af_];
        default:throw [0,Assert_failure,_al_]}}
    var Type_mismatch=[248,_at_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _iC_=match[2];
        if(typeof _iC_ !== "number" && 2 === _iC_[0])
         {var rest$0=_iC_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _ia_=type_padding(pad,fmtty),
           _ib_=_ia_[2],
           _ic_=_ia_[1];
          if(typeof _ib_ !== "number" && 1 === _ib_[0])
           {var
             fmtty_rest$1=_ib_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_ic_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _id_=type_padding(pad$0,fmtty),
           _ie_=_id_[2],
           _if_=_id_[1];
          if(typeof _ie_ !== "number" && 1 === _ie_[0])
           {var
             fmtty_rest$2=_ie_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_if_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _ig_=type_padprec(pad$1,prec,fmtty),
           _ih_=_ig_[3],
           _ii_=_ig_[2],
           _ij_=_ig_[1];
          if(typeof _ih_ !== "number" && 2 === _ih_[0])
           {var
             fmtty_rest$3=_ih_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_ij_,_ii_,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _ik_=type_padprec(pad$2,prec$0,fmtty),
           _il_=_ik_[3],
           _im_=_ik_[2],
           _in_=_ik_[1];
          if(typeof _il_ !== "number" && 3 === _il_[0])
           {var
             fmtty_rest$4=_il_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_in_,_im_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _io_=type_padprec(pad$3,prec$1,fmtty),
           _ip_=_io_[3],
           _iq_=_io_[2],
           _ir_=_io_[1];
          if(typeof _ip_ !== "number" && 4 === _ip_[0])
           {var
             fmtty_rest$5=_ip_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_ir_,_iq_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _is_=type_padprec(pad$4,prec$2,fmtty),
           _it_=_is_[3],
           _iu_=_is_[2],
           _iv_=_is_[1];
          if(typeof _it_ !== "number" && 5 === _it_[0])
           {var
             fmtty_rest$6=_it_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_iv_,_iu_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _iw_=type_padprec(pad$5,prec$3,fmtty),
           _ix_=_iw_[3],
           _iy_=_iw_[2],
           _iz_=_iw_[1];
          if(typeof _ix_ !== "number" && 6 === _ix_[0])
           {var
             fmtty_rest$7=_ix_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_iz_,_iy_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          if(typeof fmtty !== "number" && 7 === fmtty[0])
           {var
             fmtty_rest$8=fmtty[1],
             fmt_rest$8=fmt[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,fmt$9],fmtty$9]}
          break;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _iA_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_iA_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,3,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([7,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 8:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _iB_=type_ignored_format_substitution(sub_fmtty$3,rest,fmtty),
               match$27=_iB_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_iB_[1];
              return [0,[23,[8,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 9:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substitution(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substitution(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substitution
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substitution
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substitution
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substitution
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substitution
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substitution
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substitution
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substitution
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _h__=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_h__))
             throw Type_mismatch;
            var _h$_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_h$_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substitution
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substitution
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substitution
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substitution
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substitution
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _h9_=2 === padty$0?48:32,res=make(width$0,_h9_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(!switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_bytes_set(res,1,caml_string_get(str,1));
                blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(!switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return res}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(!switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_bytes_set(res$1,1,caml_string_get(str,1));
                   blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return res$1}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_bytes_set(res$0,0,c);
            blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return res$0}
          var switch$0=1}}
      if(!switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         blit$0(str,0,res,prec$0 - len | 0,len);
         return res}
      return str}
    function string_to_caml_string(str)
     {var i$1=0;
      for(;;)
       {if(caml_ml_string_length(str) <= i$1)
         var _h8_=0;
        else
         {var match$0=caml_string_unsafe_get(str,i$1);
          if(32 <= match$0)
           {var _h7_=match$0 - 34 | 0;
            if(58 < _h7_ >>> 0)
             if(93 <= _h7_)var switch$0=0,switch$1=0;else var switch$1=1;
            else
             if(56 < (_h7_ - 1 | 0) >>> 0)
              var switch$0=1,switch$1=0;
             else
              var switch$1=1;
            if(switch$1){var i$2=i$1 + 1 | 0,i$1=i$2;continue}}
          else
           var switch$0=11 <= match$0?13 === match$0?1:0:8 <= match$0?1:0;
          var _h8_=switch$0?1:1}
        if(_h8_)
         {var n=[0,0],_h0_=caml_ml_bytes_length(str) - 1 | 0,_hZ_=0;
          if(!(_h0_ < 0))
           {var i$0=_hZ_;
            for(;;)
             {var match=caml_string_unsafe_get(str,i$0);
              if(32 <= match)
               {var _h4_=match - 34 | 0;
                if(58 < _h4_ >>> 0)
                 if(93 <= _h4_)var switch$2=0,switch$3=0;else var switch$3=1;
                else
                 if(56 < (_h4_ - 1 | 0) >>> 0)
                  var switch$2=1,switch$3=0;
                 else
                  var switch$3=1;
                if(switch$3)var _h5_=1,switch$2=2}
              else
               var switch$2=11 <= match?13 === match?1:0:8 <= match?1:0;
              switch(switch$2)
               {case 0:var _h5_=4;break;case 1:var _h5_=2;break}
              n[1] = n[1] + _h5_ | 0;
              var _h6_=i$0 + 1 | 0;
              if(_h0_ !== i$0){var i$0=_h6_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(str))
           var str$0=copy(str);
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _h2_=caml_ml_bytes_length(str) - 1 | 0,_h1_=0;
            if(!(_h2_ < 0))
             {var i=_h1_;
              for(;;)
               {var c=caml_string_unsafe_get(str,i);
                if(35 <= c)
                 var switch$4=92 === c?1:127 <= c?0:2;
                else
                 if(32 <= c)
                  var switch$4=34 <= c?1:2;
                 else
                  if(14 <= c)
                   var switch$4=0;
                  else
                   switch(c)
                    {case 8:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],98);
                      var switch$4=3;
                      break;
                     case 9:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],116);
                      var switch$4=3;
                      break;
                     case 10:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],110);
                      var switch$4=3;
                      break;
                     case 13:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],114);
                      var switch$4=3;
                      break;
                     default:var switch$4=0}
                switch(switch$4)
                 {case 0:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 1:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],c);
                   break;
                  case 2:caml_string_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _h3_=i + 1 | 0;
                if(_h2_ !== i){var i=_h3_;continue}
                break}}
            var str$0=s}}
        else
         var str$0=str;
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return res}}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 0:var _hY_=_au_;break;
        case 1:var _hY_=_av_;break;
        case 2:var _hY_=_aw_;break;
        case 3:var _hY_=_ax_;break;
        case 4:var _hY_=_ay_;break;
        case 5:var _hY_=_az_;break;
        case 6:var _hY_=_aA_;break;
        case 7:var _hY_=_aB_;break;
        case 8:var _hY_=_aC_;break;
        case 9:var _hY_=_aD_;break;
        case 10:var _hY_=_aE_;break;
        case 11:var _hY_=_aF_;break;
        default:var _hY_=_aG_}
      return caml_format_int(_hY_,n)}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 0:var _hX_=_aU_;break;
        case 1:var _hX_=_aV_;break;
        case 2:var _hX_=_aW_;break;
        case 3:var _hX_=_aX_;break;
        case 4:var _hX_=_aY_;break;
        case 5:var _hX_=_aZ_;break;
        case 6:var _hX_=_a0_;break;
        case 7:var _hX_=_a1_;break;
        case 8:var _hX_=_a2_;break;
        case 9:var _hX_=_a3_;break;
        case 10:var _hX_=_a4_;break;
        case 11:var _hX_=_a5_;break;
        default:var _hX_=_a6_}
      return caml_format_int(_hX_,n)}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 0:var _hW_=_a7_;break;
        case 1:var _hW_=_a8_;break;
        case 2:var _hW_=_a9_;break;
        case 3:var _hW_=_a__;break;
        case 4:var _hW_=_a$_;break;
        case 5:var _hW_=_ba_;break;
        case 6:var _hW_=_bb_;break;
        case 7:var _hW_=_bc_;break;
        case 8:var _hW_=_bd_;break;
        case 9:var _hW_=_be_;break;
        case 10:var _hW_=_bf_;break;
        case 11:var _hW_=_bg_;break;
        default:var _hW_=_bh_}
      return caml_format_int(_hW_,n)}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 0:var _hV_=_aH_;break;
        case 1:var _hV_=_aI_;break;
        case 2:var _hV_=_aJ_;break;
        case 3:var _hV_=_aK_;break;
        case 4:var _hV_=_aL_;break;
        case 5:var _hV_=_aM_;break;
        case 6:var _hV_=_aN_;break;
        case 7:var _hV_=_aO_;break;
        case 8:var _hV_=_aP_;break;
        case 9:var _hV_=_aQ_;break;
        case 10:var _hV_=_aR_;break;
        case 11:var _hV_=_aS_;break;
        default:var _hV_=_aT_}
      return caml_int64_format(_hV_,n)}
    function convert_float(fconv,prec$0,x)
     {if(16 <= fconv)
       {if(17 <= fconv)
         switch(fconv - 17 | 0)
          {case 2:var switch$0=0;break;
           case 0:
           case 3:var sign=43,switch$0=1;break;
           default:var sign=32,switch$0=1}
        else
         var switch$0=0;
        if(!switch$0)var sign=45;
        var s=caml_hexstring_of_float(x,prec$0,sign);
        if(19 <= fconv)
         {var l=caml_ml_bytes_length(s);
          if(0 === l)return s;
          var r=caml_create_bytes(l),_hP_=l - 1 | 0,_hO_=0;
          if(!(_hP_ < 0))
           {var i=_hO_;
            for(;;)
             {var c=caml_string_unsafe_get(s,i);
              if(97 <= c)
               if(122 < c)var switch$1=0;else var _hQ_=c - 32 | 0,switch$1=1;
              else
               var switch$1=0;
              if(!switch$1)var _hQ_=c;
              caml_string_unsafe_set(r,i,_hQ_);
              var _hR_=i + 1 | 0;
              if(_hP_ !== i){var i=_hR_;continue}
              break}}
          return r}
        return s}
      if(15 === fconv)
       var _hS_=_bi_;
      else
       {var prec=abs(prec$0);
        switch(fconv)
         {case 15:var symb=70;break;
          case 0:
          case 1:
          case 2:var symb=102;break;
          case 3:
          case 4:
          case 5:var symb=101;break;
          case 6:
          case 7:
          case 8:var symb=69;break;
          case 9:
          case 10:
          case 11:var symb=103;break;
          case 12:
          case 13:
          case 14:var symb=71;break;
          case 16:
          case 17:
          case 18:var symb=104;break;
          default:var symb=72}
        var buf=buffer_create(16);
        buffer_add_char(buf,37);
        switch(fconv)
         {case 1:
          case 4:
          case 7:
          case 10:
          case 13:
          case 17:
          case 20:buffer_add_char(buf,43);break;
          case 2:
          case 5:
          case 8:
          case 11:
          case 14:
          case 18:
          case 21:buffer_add_char(buf,32);break
          }
        buffer_add_char(buf,46);
        buffer_add_string(buf,caml_new_string("" + prec));
        buffer_add_char(buf,symb);
        var _hS_=buffer_contents(buf)}
      var str=caml_format_float(_hS_,x);
      if(15 === fconv)
       {var len=caml_ml_string_length(str),match$0=caml_classify_float(x);
        if(3 === match$0)return x < 0?_bj_:_bk_;
        if(4 <= match$0)return _bl_;
        var i$0=0;
        for(;;)
         {if(i$0 === len)
           var _hU_=0;
          else
           {var
             match=caml_string_get(str,i$0),
             _hT_=match - 46 | 0,
             switch$2=
              23 < _hT_ >>> 0?55 === _hT_?1:0:21 < (_hT_ - 1 | 0) >>> 0?1:0;
            if(!switch$2){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
            var _hU_=1}
          return _hU_?str:_a_(str,_bm_)}}
      return str}
    function make_int_padding_precision(k,o,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,o,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _hL_=pad[2],_hM_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_hM_,_hL_,caml_call2(trans,iconv,x));
                      return make_printf(k,o,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_hM_,_hL_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,o,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_hM_,_hL_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,o,[4,acc,str],fmt)}}
        var _hN_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_hN_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_hN_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_hN_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,o,[4,acc,str],fmt)}}}
    function make_string_padding(k,o,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,o,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,o,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,o,new_acc,fmt)}}}
    function make_printf$0(counter,k,o,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call2(k$0,o,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,o,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {if(40 <= c)
              if(92 === c)
               var str=_f_,switch$0=2;
              else
               var switch$0=127 <= c?0:1;
             else
              if(32 <= c)
               if(39 <= c)var str=_g_,switch$0=2;else var switch$0=1;
              else
               if(14 <= c)
                var switch$0=0;
               else
                switch(c)
                 {case 8:var str=_h_,switch$0=2;break;
                  case 9:var str=_i_,switch$0=2;break;
                  case 10:var str=_j_,switch$0=2;break;
                  case 13:var str=_k_,switch$0=2;break;
                  default:var switch$0=0}
             switch(switch$0)
              {case 0:
                var s=caml_create_bytes(4);
                caml_string_unsafe_set(s,0,92);
                caml_string_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_string_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_string_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=s;
                break;
               case 1:
                var s$0=caml_create_bytes(1);
                caml_string_unsafe_set(s$0,0,c);
                var str=s$0;
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,res];
             return make_printf(k$0,o,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_string_padding
                   (k$0,o,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_string_padding
                   (k$0,o,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=convert_float(fconv,default_float_precision,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _hG_=pad$5[2],_hH_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision,x),
                            str$0=fix_padding(_hH_,_hG_,str);
                           return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_hH_,_hG_,convert_float(fconv,p,x));
                           return make_printf(k$0,o,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_hH_,_hG_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
             var _hI_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision,x),
                          str$0=fix_padding(_hI_,w,str);
                         return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_hI_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_hI_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[1];
           return function(b)
            {var _hK_=b?_c_:_d_;
             return make_printf(k$0,o,[4,acc$0,_hK_],rest$8)};
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str)
            {return make_printf(k$0,o,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _hJ_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _hJ_[2] === "number")
              {var fmt=_hJ_[1];
               return make_printf(k$0,o,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      o,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,o,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _hE_=fmt$0[1];
           if(0 === _hE_[0])
            {var
              rest$13=fmt$0[2],
              match=_hE_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(koc,kacc)
                  {return make_printf(k,koc,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_hE_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(koc,kacc)
                {return make_printf(k,koc,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bn_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bo_];
           return function(param){return make_printf(k$0,o,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bp_,n)];
             return make_printf(k$0,o,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];
             return make_printf(k$0,o,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 3:throw [0,Assert_failure,_bq_];
              default:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 8:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,o,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,o,acc$0,fmtty$0,rest$18]);
              case 9:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _hF_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,o,acc$0,rest$19,arity,_hF_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,o,acc$0,rest$19,arity,_hF_])}}
    function make_from_fmtty$0(counter,k,o,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,o,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,o,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,o,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_hD_)
           {return make_from_fmtty(k,o,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_br_];
         default:throw [0,Assert_failure,_bs_]}}
    function make_invalid_arg(counter,k,o,acc,fmt)
     {var _hC_=[8,acc,_bt_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_hC_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_hC_,fmt])}
    function make_custom$0(counter,k,o,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,o,acc,rest,arity$0,caml_call1(f,x))}}
      var _hB_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_hB_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_hB_,rest])}
    function make_printf(k,o,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,o,acc,fmt))}
    function make_from_fmtty(k,o,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,o,acc,fmtty,fmt))}
    function make_custom(k,o,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,o,acc,rest,arity,f))}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _hz_=acc$0[2],_hA_=acc$0[1];
           if(0 === _hz_[0])
            {var acc$1=_hz_[1];
             output_acc(o,_hA_);
             output_string(o,_bu_);
             var acc$0=acc$1;
             continue}
           var acc$2=_hz_[1];
           output_acc(o,_hA_);
           output_string(o,_bv_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _hx_=acc$0[2],_hy_=acc$0[1];
           if(0 === _hx_[0])
            {var acc$1=_hx_[1];
             strput_acc(b,_hy_);
             add_string(b,_bw_);
             var acc$0=acc$1;
             continue}
           var acc$2=_hx_[1];
           strput_acc(b,_hy_);
           add_string(b,_bx_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_string_unsafe_set(b[1],pos,c);
           b[2] = pos + 1 | 0;
           return 0}}
    function sprintf(fmt$0)
     {var fmt=fmt$0[1];
      function k(param,acc)
       {var
         n$0=64,
         n=max_string_length < 64?max_string_length:n$0,
         s=caml_create_bytes(n),
         buf=[0,s,0,n,s];
        strput_acc(buf,acc);
        return sub_string(buf[1],0,buf[2])}
      return make_printf(k,0,0,fmt)}
    var printers=[0,0];
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    var
     true$0=true,
     false$0=false,
     array_constructor=joo_global_object.Array,
     Error=[248,_by_,caml_fresh_oo_id(0)],
     exn=[0,Error,{}],
     slot=caml_obj_tag(exn) === 248?exn:exn[1];
    caml_register_named_value(caml_new_string("jsError"),slot);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error)
         {var e=param[2];return [0,caml_js_to_string(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_constructor
                ?0
                :[0,caml_js_to_string(e.toString())]});
    function string_of_type(t)
     {var params=[0,0];
      function string_of_type(param$0)
       {if(typeof param$0 === "number")
         switch(param$0)
          {case 0:return _bA_;
           case 1:return _bB_;
           case 2:return _bC_;
           default:return _bD_}
        else
         switch(param$0[0])
          {case 0:
            var tp=param$0[1],i=0,param=params[1];
            for(;;)
             {if(param)
               {var params$0=param[2],x=param[1];
                if(x !== tp){var i$0=i + 1 | 0,i=i$0,param=params$0;continue}}
              else
               params[1] = append(params[1],[0,tp,0]);
              var n=97 + i | 0;
              if(0 <= n)
               if(255 < n)var switch$0=0;else var _ho_=n,switch$0=1;
              else
               var switch$0=0;
              if(!switch$0)var _ho_=invalid_arg(_b_);
              return _a_(_bz_,make$0(1,_ho_))}
           case 1:
            var x$0=param$0[1];return _a_(_bE_,caml_new_string("" + x$0));
           default:
            var
             t4=param$0[4],
             t3=param$0[3],
             t2=param$0[2],
             t1=param$0[1],
             _hp_=string_of_type(t1);
            if(typeof t1 === "number")
             var switch$1=0;
            else
             if(2 === t1[0])var _hq_=_bN_,switch$1=1;else var switch$1=0;
            if(!switch$1)var _hq_=_bF_;
            var s1=caml_call1(sprintf(_hq_),_hp_),_hr_=string_of_type(t2);
            if(typeof t2 === "number")
             var switch$2=0;
            else
             if(2 === t2[0])var _hs_=_bM_,switch$2=1;else var switch$2=0;
            if(!switch$2)var _hs_=_bG_;
            var s2=caml_call1(sprintf(_hs_),_hr_),_ht_=string_of_type(t3);
            if(typeof t3 === "number")
             var switch$3=0;
            else
             if(2 === t3[0])var _hu_=_bL_,switch$3=1;else var switch$3=0;
            if(!switch$3)var _hu_=_bH_;
            var s3=caml_call1(sprintf(_hu_),_ht_),_hv_=string_of_type(t4);
            if(typeof t4 === "number")
             var switch$4=0;
            else
             if(2 === t4[0])var _hw_=_bK_,switch$4=1;else var switch$4=0;
            if(!switch$4)var _hw_=_bI_;
            var s4=caml_call1(sprintf(_hw_),_hv_);
            return caml_call4(sprintf(_bJ_),s1,s2,s3,s4)}}
      return string_of_type(t)}
    var
     compare=caml_string_compare,
     Environment=_F_([0,compare]),
     compare$0=caml_compare,
     Constraints=_w_([0,compare$0]);
    function subst_type(x,t,u)
     {if(typeof u !== "number")
       switch(u[0])
        {case 1:var x$0=u[1];if(x === x$0)return t;break;
         case 2:
          var
           u4=u[4],
           u3=u[3],
           u2=u[2],
           u1=u[1],
           _hl_=subst_type(x,t,u4),
           _hm_=subst_type(x,t,u3),
           _hn_=subst_type(x,t,u2);
          return [2,subst_type(x,t,u1),_hn_,_hm_,_hl_]
         }
      return u}
    var eRR=[248,_bQ_,caml_fresh_oo_id(0)];
    function menhir_errorcase(menhir_env,menhir_stack,menhir_s)
     {var menhir_stack$0=menhir_stack,menhir_s$0=menhir_s;
      for(;;)
       switch(menhir_s$0)
        {case 0:
          var
           match=menhir_stack$0[1],
           menhir_s$1=match[2],
           menhir_stack$1=match[1],
           menhir_stack$0=menhir_stack$1,
           menhir_s$0=menhir_s$1;
          continue;
         case 1:
          var
           menhir_s$2=menhir_stack$0[2],
           menhir_stack$2=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$2,
           menhir_s$0=menhir_s$2;
          continue;
         case 2:
          var
           menhir_s$3=menhir_stack$0[2],
           menhir_stack$3=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$3,
           menhir_s$0=menhir_s$3;
          continue;
         case 3:
          var
           menhir_s$4=menhir_stack$0[2],
           menhir_stack$4=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$4,
           menhir_s$0=menhir_s$4;
          continue;
         case 4:
          var
           match$0=menhir_stack$0[1],
           menhir_s$5=match$0[2],
           menhir_stack$5=match$0[1],
           menhir_stack$0=menhir_stack$5,
           menhir_s$0=menhir_s$5;
          continue;
         case 5:
          var
           menhir_s$6=menhir_stack$0[2],
           menhir_stack$6=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$6,
           menhir_s$0=menhir_s$6;
          continue;
         case 6:
          var
           menhir_s$7=menhir_stack$0[2],
           menhir_stack$7=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$7,
           menhir_s$0=menhir_s$7;
          continue;
         case 7:
          var
           menhir_s$8=menhir_stack$0[2],
           menhir_stack$8=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$8,
           menhir_s$0=menhir_s$8;
          continue;
         case 8:
          var
           menhir_s$9=menhir_stack$0[2],
           menhir_stack$9=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$9,
           menhir_s$0=menhir_s$9;
          continue;
         case 9:
          var
           menhir_s$10=menhir_stack$0[2],
           menhir_stack$10=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$10,
           menhir_s$0=menhir_s$10;
          continue;
         case 10:
          var
           menhir_s$11=menhir_stack$0[2],
           menhir_stack$11=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$11,
           menhir_s$0=menhir_s$11;
          continue;
         case 11:
          var
           menhir_s$12=menhir_stack$0[2],
           menhir_stack$12=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$12,
           menhir_s$0=menhir_s$12;
          continue;
         case 12:
          var
           match$1=menhir_stack$0[1],
           menhir_s$13=match$1[2],
           menhir_stack$13=match$1[1],
           menhir_stack$0=menhir_stack$13,
           menhir_s$0=menhir_s$13;
          continue;
         case 13:
          var
           menhir_s$14=menhir_stack$0[2],
           menhir_stack$14=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$14,
           menhir_s$0=menhir_s$14;
          continue;
         case 14:
          var
           menhir_s$15=menhir_stack$0[2],
           menhir_stack$15=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$15,
           menhir_s$0=menhir_s$15;
          continue;
         case 15:
          var
           menhir_s$16=menhir_stack$0[2],
           menhir_stack$16=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$16,
           menhir_s$0=menhir_s$16;
          continue;
         case 16:
          var
           menhir_s$17=menhir_stack$0[2],
           menhir_stack$17=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$17,
           menhir_s$0=menhir_s$17;
          continue;
         case 17:
          var
           menhir_s$18=menhir_stack$0[2],
           menhir_stack$18=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$18,
           menhir_s$0=menhir_s$18;
          continue;
         case 18:
          var
           menhir_s$19=menhir_stack$0[2],
           menhir_stack$19=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$19,
           menhir_s$0=menhir_s$19;
          continue;
         case 19:
          var
           menhir_s$20=menhir_stack$0[2],
           menhir_stack$20=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$20,
           menhir_s$0=menhir_s$20;
          continue;
         case 20:
          var
           menhir_s$21=menhir_stack$0[2],
           menhir_stack$21=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$21,
           menhir_s$0=menhir_s$21;
          continue;
         case 21:
          var
           menhir_s$22=menhir_stack$0[2],
           menhir_stack$22=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$22,
           menhir_s$0=menhir_s$22;
          continue;
         case 22:
          var
           menhir_s$23=menhir_stack$0[2],
           menhir_stack$23=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$23,
           menhir_s$0=menhir_s$23;
          continue;
         case 23:
          var
           menhir_s$24=menhir_stack$0[2],
           menhir_stack$24=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$24,
           menhir_s$0=menhir_s$24;
          continue;
         case 24:
          var
           match$2=menhir_stack$0[1],
           menhir_s$25=match$2[2],
           menhir_stack$25=match$2[1],
           menhir_stack$0=menhir_stack$25,
           menhir_s$0=menhir_s$25;
          continue;
         default:throw eRR}}
    function menhir_fail(param)
     {var fmt$0=fmt[1],_hk_=0;
      make_printf(function(o,acc){output_acc(o,acc);return 0},oc,_hk_,fmt$0);
      throw [0,Assert_failure,_cq_]}
    function menhir_goto_Type(counter,menhir_env,menhir_stack,menhir_s,v)
     {var menhir_stack$0=[0,menhir_stack,menhir_s,v];
      switch(menhir_s)
       {case 1:
         if(menhir_env[4])throw [0,Assert_failure,_bR_];
         var tok=menhir_env[3];
         if(typeof tok === "number")
          if(7 === tok)
           {var
             menhir_env$0=menhir_discard(menhir_env),
             _5=menhir_stack$0[3],
             _g3_=menhir_stack$0[1],
             _2=_g3_[3],
             match=_g3_[1],
             menhir_s$0=match[2],
             menhir_stack$1=match[1],
             v$0=[4,[3,0,_bT_,[0,_5],_bS_],_2];
            if(counter < 50)
             {var counter$18=counter + 1 | 0;
              return menhir_goto_SimpleExpr
                      (counter$18,menhir_env$0,menhir_stack$1,menhir_s$0,v$0)}
            return caml_trampoline_return
                    (menhir_goto_SimpleExpr,
                     [0,menhir_env$0,menhir_stack$1,menhir_s$0,v$0])}
         if(menhir_env[4])throw [0,Assert_failure,_bU_];
         menhir_env[4] = 1;
         var menhir_s$1=menhir_stack$0[2],menhir_stack$2=menhir_stack$0[1];
         return menhir_errorcase(menhir_env,menhir_stack$2,menhir_s$1);
        case 12:
         if(menhir_env[4])throw [0,Assert_failure,_bV_];
         var tok$0=menhir_env[3];
         if(typeof tok$0 === "number")
          if(7 === tok$0)
           {var menhir_env$1=menhir_discard(menhir_env),tok$1=menhir_env$1[3];
            if(typeof tok$1 === "number")
             if(9 === tok$1)
              {var
                menhir_env$2=menhir_discard(menhir_env$1),
                tok$2=menhir_env$2[3];
               if(typeof tok$2 === "number")
                switch(tok$2)
                 {case 0:
                   var _g4_=11;
                   if(counter < 50)
                    {var counter$16=counter + 1 | 0;
                     return menhir_run1$0
                             (counter$16,menhir_env$2,menhir_stack$0,_g4_)}
                   return caml_trampoline_return
                           (menhir_run1$0,[0,menhir_env$2,menhir_stack$0,_g4_]);
                  case 4:
                   var _g5_=11;
                   if(counter < 50)
                    {var counter$14=counter + 1 | 0;
                     return menhir_run2$0
                             (counter$14,menhir_env$2,menhir_stack$0,_g5_)}
                   return caml_trampoline_return
                           (menhir_run2$0,[0,menhir_env$2,menhir_stack$0,_g5_]);
                  case 8:
                   var _g6_=11;
                   if(counter < 50)
                    {var counter$12=counter + 1 | 0;
                     return menhir_run22$0
                             (counter$12,menhir_env$2,menhir_stack$0,_g6_)}
                   return caml_trampoline_return
                           (menhir_run22$0,[0,menhir_env$2,menhir_stack$0,_g6_]);
                  case 13:
                   var _g7_=11;
                   if(counter < 50)
                    {var counter$10=counter + 1 | 0;
                     return menhir_run26$0
                             (counter$10,menhir_env$2,menhir_stack$0,_g7_)}
                   return caml_trampoline_return
                           (menhir_run26$0,[0,menhir_env$2,menhir_stack$0,_g7_]);
                  case 15:
                   var _g8_=11;
                   if(counter < 50)
                    {var counter$6=counter + 1 | 0;
                     return menhir_run29$0
                             (counter$6,menhir_env$2,menhir_stack$0,_g8_)}
                   return caml_trampoline_return
                           (menhir_run29$0,[0,menhir_env$2,menhir_stack$0,_g8_]);
                  case 16:
                   var _g9_=11;
                   if(counter < 50)
                    {var counter$2=counter + 1 | 0;
                     return menhir_run31$0
                             (counter$2,menhir_env$2,menhir_stack$0,_g9_)}
                   return caml_trampoline_return
                           (menhir_run31$0,[0,menhir_env$2,menhir_stack$0,_g9_]);
                  case 17:
                   var _g__=11;
                   if(counter < 50)
                    {var counter$0=counter + 1 | 0;
                     return menhir_run39$0
                             (counter$0,menhir_env$2,menhir_stack$0,_g__)}
                   return caml_trampoline_return
                           (menhir_run39$0,[0,menhir_env$2,menhir_stack$0,_g__]);
                  default:
                   if(menhir_env$2[4])throw [0,Assert_failure,_bW_];
                   menhir_env$2[4] = 1;
                   return menhir_errorcase(menhir_env$2,menhir_stack$0,11)}
               else
                {if(0 === tok$2[0])
                  {var v$1=tok$2[1],_g$_=11;
                   if(counter < 50)
                    {var counter$8=counter + 1 | 0;
                     return menhir_run28$0
                             (counter$8,menhir_env$2,menhir_stack$0,_g$_,v$1)}
                   return caml_trampoline_return
                           (menhir_run28$0,[0,menhir_env$2,menhir_stack$0,_g$_,v$1])}
                 var v$2=tok$2[1],_ha_=11;
                 if(counter < 50)
                  {var counter$4=counter + 1 | 0;
                   return menhir_run30$0
                           (counter$4,menhir_env$2,menhir_stack$0,_ha_,v$2)}
                 return caml_trampoline_return
                         (menhir_run30$0,[0,menhir_env$2,menhir_stack$0,_ha_,v$2])}}
            if(menhir_env$1[4])throw [0,Assert_failure,_bX_];
            menhir_env$1[4] = 1;
            var menhir_s$2=menhir_stack$0[2],menhir_stack$3=menhir_stack$0[1];
            return menhir_errorcase(menhir_env$1,menhir_stack$3,menhir_s$2)}
         if(menhir_env[4])throw [0,Assert_failure,_bY_];
         menhir_env[4] = 1;
         var menhir_s$3=menhir_stack$0[2],menhir_stack$4=menhir_stack$0[1];
         return menhir_errorcase(menhir_env,menhir_stack$4,menhir_s$3);
        case 17:
         var
          _2$0=menhir_stack$0[3],
          match$0=menhir_stack$0[1],
          menhir_s$4=match$0[2],
          menhir_stack$5=match$0[1],
          v$3=[0,_2$0];
         if(counter < 50)
          {var counter$19=counter + 1 | 0;
           return menhir_goto_OptionalAnswerTypeAnnot
                   (counter$19,menhir_env,menhir_stack$5,menhir_s$4,v$3)}
         return caml_trampoline_return
                 (menhir_goto_OptionalAnswerTypeAnnot,
                  [0,menhir_env,menhir_stack$5,menhir_s$4,v$3]);
        case 23:
         if(menhir_env[4])throw [0,Assert_failure,_bZ_];
         var tok$3=menhir_env[3];
         if(typeof tok$3 === "number")
          if(7 === tok$3)
           {var
             menhir_env$3=menhir_discard(menhir_env),
             _2$1=menhir_stack$0[3],
             match$1=menhir_stack$0[1],
             menhir_s$5=match$1[2],
             menhir_stack$6=match$1[1];
            if(counter < 50)
             {var counter$20=counter + 1 | 0;
              return menhir_goto_AType
                      (counter$20,menhir_env$3,menhir_stack$6,menhir_s$5,_2$1)}
            return caml_trampoline_return
                    (menhir_goto_AType,
                     [0,menhir_env$3,menhir_stack$6,menhir_s$5,_2$1])}
         if(menhir_env[4])throw [0,Assert_failure,_b0_];
         menhir_env[4] = 1;
         var menhir_s$6=menhir_stack$0[2],menhir_stack$7=menhir_stack$0[1];
         return menhir_errorcase(menhir_env,menhir_stack$7,menhir_s$6);
        case 24:
         if(menhir_env[4])throw [0,Assert_failure,_b1_];
         var tok$4=menhir_env[3];
         if(typeof tok$4 === "number")
          if(7 === tok$4)
           {var menhir_env$4=menhir_discard(menhir_env),tok$5=menhir_env$4[3];
            if(typeof tok$5 === "number")
             if(9 === tok$5)
              {var
                menhir_env$5=menhir_discard(menhir_env$4),
                tok$6=menhir_env$5[3];
               if(typeof tok$6 === "number")
                switch(tok$6)
                 {case 0:
                   var _hb_=19;
                   if(counter < 50)
                    {var counter$17=counter + 1 | 0;
                     return menhir_run1$0
                             (counter$17,menhir_env$5,menhir_stack$0,_hb_)}
                   return caml_trampoline_return
                           (menhir_run1$0,[0,menhir_env$5,menhir_stack$0,_hb_]);
                  case 4:
                   var _hc_=19;
                   if(counter < 50)
                    {var counter$15=counter + 1 | 0;
                     return menhir_run2$0
                             (counter$15,menhir_env$5,menhir_stack$0,_hc_)}
                   return caml_trampoline_return
                           (menhir_run2$0,[0,menhir_env$5,menhir_stack$0,_hc_]);
                  case 8:
                   var _hd_=19;
                   if(counter < 50)
                    {var counter$13=counter + 1 | 0;
                     return menhir_run22$0
                             (counter$13,menhir_env$5,menhir_stack$0,_hd_)}
                   return caml_trampoline_return
                           (menhir_run22$0,[0,menhir_env$5,menhir_stack$0,_hd_]);
                  case 13:
                   var _he_=19;
                   if(counter < 50)
                    {var counter$11=counter + 1 | 0;
                     return menhir_run26$0
                             (counter$11,menhir_env$5,menhir_stack$0,_he_)}
                   return caml_trampoline_return
                           (menhir_run26$0,[0,menhir_env$5,menhir_stack$0,_he_]);
                  case 15:
                   var _hf_=19;
                   if(counter < 50)
                    {var counter$7=counter + 1 | 0;
                     return menhir_run29$0
                             (counter$7,menhir_env$5,menhir_stack$0,_hf_)}
                   return caml_trampoline_return
                           (menhir_run29$0,[0,menhir_env$5,menhir_stack$0,_hf_]);
                  case 16:
                   var _hg_=19;
                   if(counter < 50)
                    {var counter$3=counter + 1 | 0;
                     return menhir_run31$0
                             (counter$3,menhir_env$5,menhir_stack$0,_hg_)}
                   return caml_trampoline_return
                           (menhir_run31$0,[0,menhir_env$5,menhir_stack$0,_hg_]);
                  case 17:
                   var _hh_=19;
                   if(counter < 50)
                    {var counter$1=counter + 1 | 0;
                     return menhir_run39$0
                             (counter$1,menhir_env$5,menhir_stack$0,_hh_)}
                   return caml_trampoline_return
                           (menhir_run39$0,[0,menhir_env$5,menhir_stack$0,_hh_]);
                  default:
                   if(menhir_env$5[4])throw [0,Assert_failure,_b2_];
                   menhir_env$5[4] = 1;
                   return menhir_errorcase(menhir_env$5,menhir_stack$0,19)}
               else
                {if(0 === tok$6[0])
                  {var v$4=tok$6[1],_hi_=19;
                   if(counter < 50)
                    {var counter$9=counter + 1 | 0;
                     return menhir_run28$0
                             (counter$9,menhir_env$5,menhir_stack$0,_hi_,v$4)}
                   return caml_trampoline_return
                           (menhir_run28$0,[0,menhir_env$5,menhir_stack$0,_hi_,v$4])}
                 var v$5=tok$6[1],_hj_=19;
                 if(counter < 50)
                  {var counter$5=counter + 1 | 0;
                   return menhir_run30$0
                           (counter$5,menhir_env$5,menhir_stack$0,_hj_,v$5)}
                 return caml_trampoline_return
                         (menhir_run30$0,[0,menhir_env$5,menhir_stack$0,_hj_,v$5])}}
            if(menhir_env$4[4])throw [0,Assert_failure,_b3_];
            menhir_env$4[4] = 1;
            var menhir_s$7=menhir_stack$0[2],menhir_stack$8=menhir_stack$0[1];
            return menhir_errorcase(menhir_env$4,menhir_stack$8,menhir_s$7)}
         if(menhir_env[4])throw [0,Assert_failure,_b4_];
         menhir_env[4] = 1;
         var menhir_s$8=menhir_stack$0[2],menhir_stack$9=menhir_stack$0[1];
         return menhir_errorcase(menhir_env,menhir_stack$9,menhir_s$8);
        default:return menhir_fail(0)}}
    function menhir_run43(counter,menhir_env,menhir_stack)
     {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
      if(typeof tok === "number")
       switch(tok)
        {case 0:
          var _gU_=9;
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return menhir_run1$0(counter$8,menhir_env$0,menhir_stack,_gU_)}
          return caml_trampoline_return
                  (menhir_run1$0,[0,menhir_env$0,menhir_stack,_gU_]);
         case 4:
          var _gV_=9;
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return menhir_run2$0(counter$7,menhir_env$0,menhir_stack,_gV_)}
          return caml_trampoline_return
                  (menhir_run2$0,[0,menhir_env$0,menhir_stack,_gV_]);
         case 8:
          var _gW_=9;
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return menhir_run22$0(counter$6,menhir_env$0,menhir_stack,_gW_)}
          return caml_trampoline_return
                  (menhir_run22$0,[0,menhir_env$0,menhir_stack,_gW_]);
         case 13:
          var _gX_=9;
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return menhir_run26$0(counter$5,menhir_env$0,menhir_stack,_gX_)}
          return caml_trampoline_return
                  (menhir_run26$0,[0,menhir_env$0,menhir_stack,_gX_]);
         case 15:
          var _gY_=9;
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return menhir_run29$0(counter$3,menhir_env$0,menhir_stack,_gY_)}
          return caml_trampoline_return
                  (menhir_run29$0,[0,menhir_env$0,menhir_stack,_gY_]);
         case 16:
          var _gZ_=9;
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return menhir_run31$0(counter$1,menhir_env$0,menhir_stack,_gZ_)}
          return caml_trampoline_return
                  (menhir_run31$0,[0,menhir_env$0,menhir_stack,_gZ_]);
         case 17:
          var _g0_=9;
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return menhir_run39$0(counter$0,menhir_env$0,menhir_stack,_g0_)}
          return caml_trampoline_return
                  (menhir_run39$0,[0,menhir_env$0,menhir_stack,_g0_]);
         default:
          if(menhir_env$0[4])throw [0,Assert_failure,_b5_];
          menhir_env$0[4] = 1;
          return menhir_errorcase(menhir_env$0,menhir_stack,9)}
      else
       {if(0 === tok[0])
         {var v=tok[1],_g1_=9;
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return menhir_run28$0(counter$4,menhir_env$0,menhir_stack,_g1_,v)}
          return caml_trampoline_return
                  (menhir_run28$0,[0,menhir_env$0,menhir_stack,_g1_,v])}
        var v$0=tok[1],_g2_=9;
        if(counter < 50)
         {var counter$2=counter + 1 | 0;
          return menhir_run30$0(counter$2,menhir_env$0,menhir_stack,_g2_,v$0)}
        return caml_trampoline_return
                (menhir_run30$0,[0,menhir_env$0,menhir_stack,_g2_,v$0])}}
    function menhir_run45(counter,menhir_env,menhir_stack)
     {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
      if(typeof tok === "number")
       switch(tok)
        {case 0:
          var _gL_=8;
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return menhir_run1$0(counter$8,menhir_env$0,menhir_stack,_gL_)}
          return caml_trampoline_return
                  (menhir_run1$0,[0,menhir_env$0,menhir_stack,_gL_]);
         case 4:
          var _gM_=8;
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return menhir_run2$0(counter$7,menhir_env$0,menhir_stack,_gM_)}
          return caml_trampoline_return
                  (menhir_run2$0,[0,menhir_env$0,menhir_stack,_gM_]);
         case 8:
          var _gN_=8;
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return menhir_run22$0(counter$6,menhir_env$0,menhir_stack,_gN_)}
          return caml_trampoline_return
                  (menhir_run22$0,[0,menhir_env$0,menhir_stack,_gN_]);
         case 13:
          var _gO_=8;
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return menhir_run26$0(counter$5,menhir_env$0,menhir_stack,_gO_)}
          return caml_trampoline_return
                  (menhir_run26$0,[0,menhir_env$0,menhir_stack,_gO_]);
         case 15:
          var _gP_=8;
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return menhir_run29$0(counter$3,menhir_env$0,menhir_stack,_gP_)}
          return caml_trampoline_return
                  (menhir_run29$0,[0,menhir_env$0,menhir_stack,_gP_]);
         case 16:
          var _gQ_=8;
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return menhir_run31$0(counter$1,menhir_env$0,menhir_stack,_gQ_)}
          return caml_trampoline_return
                  (menhir_run31$0,[0,menhir_env$0,menhir_stack,_gQ_]);
         case 17:
          var _gR_=8;
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return menhir_run39$0(counter$0,menhir_env$0,menhir_stack,_gR_)}
          return caml_trampoline_return
                  (menhir_run39$0,[0,menhir_env$0,menhir_stack,_gR_]);
         default:
          if(menhir_env$0[4])throw [0,Assert_failure,_b6_];
          menhir_env$0[4] = 1;
          return menhir_errorcase(menhir_env$0,menhir_stack,8)}
      else
       {if(0 === tok[0])
         {var v=tok[1],_gS_=8;
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return menhir_run28$0(counter$4,menhir_env$0,menhir_stack,_gS_,v)}
          return caml_trampoline_return
                  (menhir_run28$0,[0,menhir_env$0,menhir_stack,_gS_,v])}
        var v$0=tok[1],_gT_=8;
        if(counter < 50)
         {var counter$2=counter + 1 | 0;
          return menhir_run30$0(counter$2,menhir_env$0,menhir_stack,_gT_,v$0)}
        return caml_trampoline_return
                (menhir_run30$0,[0,menhir_env$0,menhir_stack,_gT_,v$0])}}
    function menhir_run47(counter,menhir_env,menhir_stack)
     {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
      if(typeof tok === "number")
       switch(tok)
        {case 0:
          var _gC_=7;
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return menhir_run1$0(counter$8,menhir_env$0,menhir_stack,_gC_)}
          return caml_trampoline_return
                  (menhir_run1$0,[0,menhir_env$0,menhir_stack,_gC_]);
         case 4:
          var _gD_=7;
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return menhir_run2$0(counter$7,menhir_env$0,menhir_stack,_gD_)}
          return caml_trampoline_return
                  (menhir_run2$0,[0,menhir_env$0,menhir_stack,_gD_]);
         case 8:
          var _gE_=7;
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return menhir_run22$0(counter$6,menhir_env$0,menhir_stack,_gE_)}
          return caml_trampoline_return
                  (menhir_run22$0,[0,menhir_env$0,menhir_stack,_gE_]);
         case 13:
          var _gF_=7;
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return menhir_run26$0(counter$5,menhir_env$0,menhir_stack,_gF_)}
          return caml_trampoline_return
                  (menhir_run26$0,[0,menhir_env$0,menhir_stack,_gF_]);
         case 15:
          var _gG_=7;
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return menhir_run29$0(counter$3,menhir_env$0,menhir_stack,_gG_)}
          return caml_trampoline_return
                  (menhir_run29$0,[0,menhir_env$0,menhir_stack,_gG_]);
         case 16:
          var _gH_=7;
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return menhir_run31$0(counter$1,menhir_env$0,menhir_stack,_gH_)}
          return caml_trampoline_return
                  (menhir_run31$0,[0,menhir_env$0,menhir_stack,_gH_]);
         case 17:
          var _gI_=7;
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return menhir_run39$0(counter$0,menhir_env$0,menhir_stack,_gI_)}
          return caml_trampoline_return
                  (menhir_run39$0,[0,menhir_env$0,menhir_stack,_gI_]);
         default:
          if(menhir_env$0[4])throw [0,Assert_failure,_b7_];
          menhir_env$0[4] = 1;
          return menhir_errorcase(menhir_env$0,menhir_stack,7)}
      else
       {if(0 === tok[0])
         {var v=tok[1],_gJ_=7;
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return menhir_run28$0(counter$4,menhir_env$0,menhir_stack,_gJ_,v)}
          return caml_trampoline_return
                  (menhir_run28$0,[0,menhir_env$0,menhir_stack,_gJ_,v])}
        var v$0=tok[1],_gK_=7;
        if(counter < 50)
         {var counter$2=counter + 1 | 0;
          return menhir_run30$0(counter$2,menhir_env$0,menhir_stack,_gK_,v$0)}
        return caml_trampoline_return
                (menhir_run30$0,[0,menhir_env$0,menhir_stack,_gK_,v$0])}}
    function menhir_run49(counter,menhir_env,menhir_stack)
     {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
      if(typeof tok === "number")
       switch(tok)
        {case 0:
          var _gt_=6;
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return menhir_run1$0(counter$8,menhir_env$0,menhir_stack,_gt_)}
          return caml_trampoline_return
                  (menhir_run1$0,[0,menhir_env$0,menhir_stack,_gt_]);
         case 4:
          var _gu_=6;
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return menhir_run2$0(counter$7,menhir_env$0,menhir_stack,_gu_)}
          return caml_trampoline_return
                  (menhir_run2$0,[0,menhir_env$0,menhir_stack,_gu_]);
         case 8:
          var _gv_=6;
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return menhir_run22$0(counter$6,menhir_env$0,menhir_stack,_gv_)}
          return caml_trampoline_return
                  (menhir_run22$0,[0,menhir_env$0,menhir_stack,_gv_]);
         case 13:
          var _gw_=6;
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return menhir_run26$0(counter$5,menhir_env$0,menhir_stack,_gw_)}
          return caml_trampoline_return
                  (menhir_run26$0,[0,menhir_env$0,menhir_stack,_gw_]);
         case 15:
          var _gx_=6;
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return menhir_run29$0(counter$3,menhir_env$0,menhir_stack,_gx_)}
          return caml_trampoline_return
                  (menhir_run29$0,[0,menhir_env$0,menhir_stack,_gx_]);
         case 16:
          var _gy_=6;
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return menhir_run31$0(counter$1,menhir_env$0,menhir_stack,_gy_)}
          return caml_trampoline_return
                  (menhir_run31$0,[0,menhir_env$0,menhir_stack,_gy_]);
         case 17:
          var _gz_=6;
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return menhir_run39$0(counter$0,menhir_env$0,menhir_stack,_gz_)}
          return caml_trampoline_return
                  (menhir_run39$0,[0,menhir_env$0,menhir_stack,_gz_]);
         default:
          if(menhir_env$0[4])throw [0,Assert_failure,_b8_];
          menhir_env$0[4] = 1;
          return menhir_errorcase(menhir_env$0,menhir_stack,6)}
      else
       {if(0 === tok[0])
         {var v=tok[1],_gA_=6;
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return menhir_run28$0(counter$4,menhir_env$0,menhir_stack,_gA_,v)}
          return caml_trampoline_return
                  (menhir_run28$0,[0,menhir_env$0,menhir_stack,_gA_,v])}
        var v$0=tok[1],_gB_=6;
        if(counter < 50)
         {var counter$2=counter + 1 | 0;
          return menhir_run30$0(counter$2,menhir_env$0,menhir_stack,_gB_,v$0)}
        return caml_trampoline_return
                (menhir_run30$0,[0,menhir_env$0,menhir_stack,_gB_,v$0])}}
    function menhir_run51(counter,menhir_env,menhir_stack)
     {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
      if(typeof tok === "number")
       switch(tok)
        {case 0:
          var _gk_=5;
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return menhir_run1$0(counter$8,menhir_env$0,menhir_stack,_gk_)}
          return caml_trampoline_return
                  (menhir_run1$0,[0,menhir_env$0,menhir_stack,_gk_]);
         case 4:
          var _gl_=5;
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return menhir_run2$0(counter$7,menhir_env$0,menhir_stack,_gl_)}
          return caml_trampoline_return
                  (menhir_run2$0,[0,menhir_env$0,menhir_stack,_gl_]);
         case 8:
          var _gm_=5;
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return menhir_run22$0(counter$6,menhir_env$0,menhir_stack,_gm_)}
          return caml_trampoline_return
                  (menhir_run22$0,[0,menhir_env$0,menhir_stack,_gm_]);
         case 13:
          var _gn_=5;
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return menhir_run26$0(counter$5,menhir_env$0,menhir_stack,_gn_)}
          return caml_trampoline_return
                  (menhir_run26$0,[0,menhir_env$0,menhir_stack,_gn_]);
         case 15:
          var _go_=5;
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return menhir_run29$0(counter$3,menhir_env$0,menhir_stack,_go_)}
          return caml_trampoline_return
                  (menhir_run29$0,[0,menhir_env$0,menhir_stack,_go_]);
         case 16:
          var _gp_=5;
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return menhir_run31$0(counter$1,menhir_env$0,menhir_stack,_gp_)}
          return caml_trampoline_return
                  (menhir_run31$0,[0,menhir_env$0,menhir_stack,_gp_]);
         case 17:
          var _gq_=5;
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return menhir_run39$0(counter$0,menhir_env$0,menhir_stack,_gq_)}
          return caml_trampoline_return
                  (menhir_run39$0,[0,menhir_env$0,menhir_stack,_gq_]);
         default:
          if(menhir_env$0[4])throw [0,Assert_failure,_b9_];
          menhir_env$0[4] = 1;
          return menhir_errorcase(menhir_env$0,menhir_stack,5)}
      else
       {if(0 === tok[0])
         {var v=tok[1],_gr_=5;
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return menhir_run28$0(counter$4,menhir_env$0,menhir_stack,_gr_,v)}
          return caml_trampoline_return
                  (menhir_run28$0,[0,menhir_env$0,menhir_stack,_gr_,v])}
        var v$0=tok[1],_gs_=5;
        if(counter < 50)
         {var counter$2=counter + 1 | 0;
          return menhir_run30$0(counter$2,menhir_env$0,menhir_stack,_gs_,v$0)}
        return caml_trampoline_return
                (menhir_run30$0,[0,menhir_env$0,menhir_stack,_gs_,v$0])}}
    function menhir_goto_AType(counter,menhir_env,menhir_stack,menhir_s,v)
     {var menhir_stack$0=[0,menhir_stack,menhir_s,v];
      switch(menhir_s)
       {case 20:
         var
          _7=menhir_stack$0[3],
          _ga_=menhir_stack$0[1],
          _5=_ga_[3],
          _gb_=_ga_[1],
          _3=_gb_[3],
          match=_gb_[1],
          _1$0=match[3],
          menhir_s$2=match[2],
          menhir_stack$3=match[1],
          v$0=[2,_1$0,_3,_5,_7];
         if(counter < 50)
          {var counter$12=counter + 1 | 0;
           return menhir_goto_Type
                   (counter$12,menhir_env,menhir_stack$3,menhir_s$2,v$0)}
         return caml_trampoline_return
                 (menhir_goto_Type,
                  [0,menhir_env,menhir_stack$3,menhir_s$2,v$0]);
        case 21:
         if(menhir_env[4])throw [0,Assert_failure,_cb_];
         var tok$1=menhir_env[3];
         if(typeof tok$1 === "number")
          if(3 === tok$1)
           {var menhir_env$1=menhir_discard(menhir_env),tok$2=menhir_env$1[3];
            if(typeof tok$2 === "number")
             if(10 <= tok$2)
              {var switcher$0=tok$2 - 10 | 0;
               switch(switcher$0)
                {case 0:
                  var _gc_=20;
                  if(counter < 50)
                   {var counter$9=counter + 1 | 0;
                    return menhir_run6
                            (counter$9,menhir_env$1,menhir_stack$0,_gc_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$1,menhir_stack$0,_gc_]);
                 case 3:
                  var _gd_=20;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run7
                            (counter$6,menhir_env$1,menhir_stack$0,_gd_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$1,menhir_stack$0,_gd_]);
                 case 4:
                  var _ge_=20;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run8
                            (counter$3,menhir_env$1,menhir_stack$0,_ge_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$1,menhir_stack$0,_ge_]);
                 case 11:
                  var _gf_=20;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run9
                            (counter$0,menhir_env$1,menhir_stack$0,_gf_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$1,menhir_stack$0,_gf_])
                 }}
            if(menhir_env$1[4])throw [0,Assert_failure,_cc_];
            menhir_env$1[4] = 1;
            return menhir_errorcase(menhir_env$1,menhir_stack$0,20)}
         if(menhir_env[4])throw [0,Assert_failure,_cd_];
         menhir_env[4] = 1;
         var menhir_s$3=menhir_stack$0[2],menhir_stack$4=menhir_stack$0[1];
         return menhir_errorcase(menhir_env,menhir_stack$4,menhir_s$3);
        case 22:
         if(menhir_env[4])throw [0,Assert_failure,_ce_];
         var tok$3=menhir_env[3];
         if(typeof tok$3 === "number")
          if(9 === tok$3)
           {var menhir_env$2=menhir_discard(menhir_env),tok$4=menhir_env$2[3];
            if(typeof tok$4 === "number")
             if(10 <= tok$4)
              {var switcher$1=tok$4 - 10 | 0;
               switch(switcher$1)
                {case 0:
                  var _gg_=21;
                  if(counter < 50)
                   {var counter$10=counter + 1 | 0;
                    return menhir_run6
                            (counter$10,menhir_env$2,menhir_stack$0,_gg_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$2,menhir_stack$0,_gg_]);
                 case 3:
                  var _gh_=21;
                  if(counter < 50)
                   {var counter$7=counter + 1 | 0;
                    return menhir_run7
                            (counter$7,menhir_env$2,menhir_stack$0,_gh_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$2,menhir_stack$0,_gh_]);
                 case 4:
                  var _gi_=21;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8
                            (counter$4,menhir_env$2,menhir_stack$0,_gi_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$2,menhir_stack$0,_gi_]);
                 case 11:
                  var _gj_=21;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run9
                            (counter$1,menhir_env$2,menhir_stack$0,_gj_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$2,menhir_stack$0,_gj_])
                 }}
            if(menhir_env$2[4])throw [0,Assert_failure,_cf_];
            menhir_env$2[4] = 1;
            return menhir_errorcase(menhir_env$2,menhir_stack$0,21)}
         if(menhir_env[4])throw [0,Assert_failure,_cg_];
         menhir_env[4] = 1;
         var menhir_s$4=menhir_stack$0[2],menhir_stack$5=menhir_stack$0[1];
         return menhir_errorcase(menhir_env,menhir_stack$5,menhir_s$4);
        case 1:
        case 12:
        case 17:
        case 23:
        case 24:
         if(menhir_env[4])throw [0,Assert_failure,_b__];
         var tok=menhir_env[3];
         if(typeof tok === "number")
          switch(tok)
           {case 3:
             var
              menhir_env$0=menhir_discard(menhir_env),
              tok$0=menhir_env$0[3];
             if(typeof tok$0 === "number")
              if(10 <= tok$0)
               {var switcher=tok$0 - 10 | 0;
                switch(switcher)
                 {case 0:
                   var _f8_=22;
                   if(counter < 50)
                    {var counter$11=counter + 1 | 0;
                     return menhir_run6
                             (counter$11,menhir_env$0,menhir_stack$0,_f8_)}
                   return caml_trampoline_return
                           (menhir_run6,[0,menhir_env$0,menhir_stack$0,_f8_]);
                  case 3:
                   var _f9_=22;
                   if(counter < 50)
                    {var counter$8=counter + 1 | 0;
                     return menhir_run7
                             (counter$8,menhir_env$0,menhir_stack$0,_f9_)}
                   return caml_trampoline_return
                           (menhir_run7,[0,menhir_env$0,menhir_stack$0,_f9_]);
                  case 4:
                   var _f__=22;
                   if(counter < 50)
                    {var counter$5=counter + 1 | 0;
                     return menhir_run8
                             (counter$5,menhir_env$0,menhir_stack$0,_f__)}
                   return caml_trampoline_return
                           (menhir_run8,[0,menhir_env$0,menhir_stack$0,_f__]);
                  case 11:
                   var _f$_=22;
                   if(counter < 50)
                    {var counter$2=counter + 1 | 0;
                     return menhir_run9
                             (counter$2,menhir_env$0,menhir_stack$0,_f$_)}
                   return caml_trampoline_return
                           (menhir_run9,[0,menhir_env$0,menhir_stack$0,_f$_])
                  }}
             if(menhir_env$0[4])throw [0,Assert_failure,_ca_];
             menhir_env$0[4] = 1;
             return menhir_errorcase(menhir_env$0,menhir_stack$0,22);
            case 0:
            case 4:
            case 7:
            case 8:
            case 13:
            case 15:
            case 16:
            case 17:break;
            default:
             if(menhir_env[4])throw [0,Assert_failure,_b$_];
             menhir_env[4] = 1;
             var
              menhir_s$1=menhir_stack$0[2],
              menhir_stack$2=menhir_stack$0[1];
             return menhir_errorcase(menhir_env,menhir_stack$2,menhir_s$1)}
         var
          _1=menhir_stack$0[3],
          menhir_s$0=menhir_stack$0[2],
          menhir_stack$1=menhir_stack$0[1];
         if(counter < 50)
          {var counter$13=counter + 1 | 0;
           return menhir_goto_Type
                   (counter$13,menhir_env,menhir_stack$1,menhir_s$0,_1)}
         return caml_trampoline_return
                 (menhir_goto_Type,
                  [0,menhir_env,menhir_stack$1,menhir_s$0,_1]);
        default:return menhir_fail(0)}}
    function menhir_goto_OptionalAnswerTypeAnnot
     (counter,menhir_env,menhir_stack,menhir_s,v)
     {var menhir_stack$0=[0,menhir_stack,menhir_s,v];
      if(13 === menhir_s)
       {if(menhir_env[4])throw [0,Assert_failure,_ch_];
        var tok=menhir_env[3];
        if(typeof tok === "number")
         {if(13 === tok)
           {var menhir_env$0=menhir_discard(menhir_env),tok$0=menhir_env$0[3];
            if(typeof tok$0 !== "number" && 1 === tok$0[0])
             {var
               v$0=tok$0[1],
               menhir_stack$3=[0,menhir_stack$0,v$0],
               menhir_env$1=menhir_discard(menhir_env$0),
               tok$1=menhir_env$1[3];
              if(typeof tok$1 === "number")
               if(19 === tok$1)
                {var
                  menhir_env$2=menhir_discard(menhir_env$1),
                  tok$2=menhir_env$2[3];
                 if(typeof tok$2 === "number")
                  if(10 <= tok$2)
                   {var switcher=tok$2 - 10 | 0;
                    switch(switcher)
                     {case 0:
                       var _fM_=12;
                       if(counter < 50)
                        {var counter$21=counter + 1 | 0;
                         return menhir_run6
                                 (counter$21,menhir_env$2,menhir_stack$3,_fM_)}
                       return caml_trampoline_return
                               (menhir_run6,[0,menhir_env$2,menhir_stack$3,_fM_]);
                      case 3:
                       var _fN_=12;
                       if(counter < 50)
                        {var counter$20=counter + 1 | 0;
                         return menhir_run7
                                 (counter$20,menhir_env$2,menhir_stack$3,_fN_)}
                       return caml_trampoline_return
                               (menhir_run7,[0,menhir_env$2,menhir_stack$3,_fN_]);
                      case 4:
                       var _fO_=12;
                       if(counter < 50)
                        {var counter$19=counter + 1 | 0;
                         return menhir_run8
                                 (counter$19,menhir_env$2,menhir_stack$3,_fO_)}
                       return caml_trampoline_return
                               (menhir_run8,[0,menhir_env$2,menhir_stack$3,_fO_]);
                      case 11:
                       var _fP_=12;
                       if(counter < 50)
                        {var counter$18=counter + 1 | 0;
                         return menhir_run9
                                 (counter$18,menhir_env$2,menhir_stack$3,_fP_)}
                       return caml_trampoline_return
                               (menhir_run9,[0,menhir_env$2,menhir_stack$3,_fP_])
                      }}
                 if(menhir_env$2[4])throw [0,Assert_failure,_ck_];
                 menhir_env$2[4] = 1;
                 return menhir_errorcase(menhir_env$2,menhir_stack$3,12)}
              if(menhir_env$1[4])throw [0,Assert_failure,_cl_];
              menhir_env$1[4] = 1;
              var
               match=menhir_stack$3[1],
               menhir_s$2=match[2],
               menhir_stack$4=match[1];
              return menhir_errorcase(menhir_env$1,menhir_stack$4,menhir_s$2)}
            if(menhir_env$0[4])throw [0,Assert_failure,_cj_];
            menhir_env$0[4] = 1;
            var menhir_s$1=menhir_stack$0[2],menhir_stack$2=menhir_stack$0[1];
            return menhir_errorcase(menhir_env$0,menhir_stack$2,menhir_s$1)}}
        else
         if(1 === tok[0])
          {var
            v$1=tok[1],
            menhir_stack$5=[0,menhir_stack$0,v$1],
            menhir_env$3=menhir_discard(menhir_env),
            tok$3=menhir_env$3[3];
           if(typeof tok$3 === "number")
            if(9 === tok$3)
             {var
               menhir_env$4=menhir_discard(menhir_env$3),
               tok$4=menhir_env$4[3];
              if(typeof tok$4 === "number")
               switch(tok$4)
                {case 0:
                  var _fQ_=4;
                  if(counter < 50)
                   {var counter$17=counter + 1 | 0;
                    return menhir_run1$0
                            (counter$17,menhir_env$4,menhir_stack$5,_fQ_)}
                  return caml_trampoline_return
                          (menhir_run1$0,[0,menhir_env$4,menhir_stack$5,_fQ_]);
                 case 4:
                  var _fR_=4;
                  if(counter < 50)
                   {var counter$15=counter + 1 | 0;
                    return menhir_run2$0
                            (counter$15,menhir_env$4,menhir_stack$5,_fR_)}
                  return caml_trampoline_return
                          (menhir_run2$0,[0,menhir_env$4,menhir_stack$5,_fR_]);
                 case 8:
                  var _fS_=4;
                  if(counter < 50)
                   {var counter$13=counter + 1 | 0;
                    return menhir_run22$0
                            (counter$13,menhir_env$4,menhir_stack$5,_fS_)}
                  return caml_trampoline_return
                          (menhir_run22$0,[0,menhir_env$4,menhir_stack$5,_fS_]);
                 case 13:
                  var _fT_=4;
                  if(counter < 50)
                   {var counter$11=counter + 1 | 0;
                    return menhir_run26$0
                            (counter$11,menhir_env$4,menhir_stack$5,_fT_)}
                  return caml_trampoline_return
                          (menhir_run26$0,[0,menhir_env$4,menhir_stack$5,_fT_]);
                 case 15:
                  var _fU_=4;
                  if(counter < 50)
                   {var counter$7=counter + 1 | 0;
                    return menhir_run29$0
                            (counter$7,menhir_env$4,menhir_stack$5,_fU_)}
                  return caml_trampoline_return
                          (menhir_run29$0,[0,menhir_env$4,menhir_stack$5,_fU_]);
                 case 16:
                  var _fV_=4;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run31$0
                            (counter$3,menhir_env$4,menhir_stack$5,_fV_)}
                  return caml_trampoline_return
                          (menhir_run31$0,[0,menhir_env$4,menhir_stack$5,_fV_]);
                 case 17:
                  var _fW_=4;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run39$0
                            (counter$1,menhir_env$4,menhir_stack$5,_fW_)}
                  return caml_trampoline_return
                          (menhir_run39$0,[0,menhir_env$4,menhir_stack$5,_fW_]);
                 default:
                  if(menhir_env$4[4])throw [0,Assert_failure,_cm_];
                  menhir_env$4[4] = 1;
                  return menhir_errorcase(menhir_env$4,menhir_stack$5,4)}
              else
               {if(0 === tok$4[0])
                 {var v$2=tok$4[1],_fX_=4;
                  if(counter < 50)
                   {var counter$9=counter + 1 | 0;
                    return menhir_run28$0
                            (counter$9,menhir_env$4,menhir_stack$5,_fX_,v$2)}
                  return caml_trampoline_return
                          (menhir_run28$0,[0,menhir_env$4,menhir_stack$5,_fX_,v$2])}
                var v$3=tok$4[1],_fY_=4;
                if(counter < 50)
                 {var counter$5=counter + 1 | 0;
                  return menhir_run30$0
                          (counter$5,menhir_env$4,menhir_stack$5,_fY_,v$3)}
                return caml_trampoline_return
                        (menhir_run30$0,[0,menhir_env$4,menhir_stack$5,_fY_,v$3])}}
           if(menhir_env$3[4])throw [0,Assert_failure,_cn_];
           menhir_env$3[4] = 1;
           var
            match$0=menhir_stack$5[1],
            menhir_s$3=match$0[2],
            menhir_stack$6=match$0[1];
           return menhir_errorcase(menhir_env$3,menhir_stack$6,menhir_s$3)}
        if(menhir_env[4])throw [0,Assert_failure,_ci_];
        menhir_env[4] = 1;
        var menhir_s$0=menhir_stack$0[2],menhir_stack$1=menhir_stack$0[1];
        return menhir_errorcase(menhir_env,menhir_stack$1,menhir_s$0)}
      if(18 === menhir_s)
       {if(menhir_env[4])throw [0,Assert_failure,_co_];
        var tok$5=menhir_env[3];
        if(typeof tok$5 === "number")
         switch(tok$5)
          {case 0:
            var _fZ_=16;
            if(counter < 50)
             {var counter$16=counter + 1 | 0;
              return menhir_run1$0(counter$16,menhir_env,menhir_stack$0,_fZ_)}
            return caml_trampoline_return
                    (menhir_run1$0,[0,menhir_env,menhir_stack$0,_fZ_]);
           case 4:
            var _f0_=16;
            if(counter < 50)
             {var counter$14=counter + 1 | 0;
              return menhir_run2$0(counter$14,menhir_env,menhir_stack$0,_f0_)}
            return caml_trampoline_return
                    (menhir_run2$0,[0,menhir_env,menhir_stack$0,_f0_]);
           case 8:
            var _f1_=16;
            if(counter < 50)
             {var counter$12=counter + 1 | 0;
              return menhir_run22$0(counter$12,menhir_env,menhir_stack$0,_f1_)}
            return caml_trampoline_return
                    (menhir_run22$0,[0,menhir_env,menhir_stack$0,_f1_]);
           case 13:
            var _f2_=16;
            if(counter < 50)
             {var counter$10=counter + 1 | 0;
              return menhir_run26$0(counter$10,menhir_env,menhir_stack$0,_f2_)}
            return caml_trampoline_return
                    (menhir_run26$0,[0,menhir_env,menhir_stack$0,_f2_]);
           case 15:
            var _f3_=16;
            if(counter < 50)
             {var counter$6=counter + 1 | 0;
              return menhir_run29$0(counter$6,menhir_env,menhir_stack$0,_f3_)}
            return caml_trampoline_return
                    (menhir_run29$0,[0,menhir_env,menhir_stack$0,_f3_]);
           case 16:
            var _f4_=16;
            if(counter < 50)
             {var counter$2=counter + 1 | 0;
              return menhir_run31$0(counter$2,menhir_env,menhir_stack$0,_f4_)}
            return caml_trampoline_return
                    (menhir_run31$0,[0,menhir_env,menhir_stack$0,_f4_]);
           case 17:
            var _f5_=16;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return menhir_run39$0(counter$0,menhir_env,menhir_stack$0,_f5_)}
            return caml_trampoline_return
                    (menhir_run39$0,[0,menhir_env,menhir_stack$0,_f5_]);
           default:
            if(menhir_env[4])throw [0,Assert_failure,_cp_];
            menhir_env[4] = 1;
            return menhir_errorcase(menhir_env,menhir_stack$0,16)}
        else
         {if(0 === tok$5[0])
           {var v$4=tok$5[1],_f6_=16;
            if(counter < 50)
             {var counter$8=counter + 1 | 0;
              return menhir_run28$0
                      (counter$8,menhir_env,menhir_stack$0,_f6_,v$4)}
            return caml_trampoline_return
                    (menhir_run28$0,[0,menhir_env,menhir_stack$0,_f6_,v$4])}
          var v$5=tok$5[1],_f7_=16;
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return menhir_run30$0
                    (counter$4,menhir_env,menhir_stack$0,_f7_,v$5)}
          return caml_trampoline_return
                  (menhir_run30$0,[0,menhir_env,menhir_stack$0,_f7_,v$5])}}
      return menhir_fail(0)}
    function menhir_goto_Expr(counter,menhir_env,menhir_stack,menhir_s,v)
     {var menhir_stack$0=menhir_stack,menhir_s$0=menhir_s,v$0=v;
      for(;;)
       {var menhir_stack$1=[0,menhir_stack$0,menhir_s$0,v$0];
        switch(menhir_s$0)
         {case 0:
           var
            _4=menhir_stack$1[3],
            _ff_=menhir_stack$1[1],
            _2=_ff_[2],
            match=_ff_[1],
            menhir_s$1=match[2],
            menhir_stack$2=match[1],
            v$1=[5,_2,0,_4],
            menhir_stack$0=menhir_stack$2,
            menhir_s$0=menhir_s$1,
            v$0=v$1;
           continue;
          case 2:
           if(menhir_env[4])throw [0,Assert_failure,_cr_];
           var tok=menhir_env[3];
           if(typeof tok === "number")
            switch(tok)
             {case 2:
               if(counter < 50)
                {var counter$56=counter + 1 | 0;
                 return menhir_run43(counter$56,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run43,[0,menhir_env,menhir_stack$1]);
              case 3:
               if(counter < 50)
                {var counter$46=counter + 1 | 0;
                 return menhir_run45(counter$46,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run45,[0,menhir_env,menhir_stack$1]);
              case 11:
               if(counter < 50)
                {var counter$31=counter + 1 | 0;
                 return menhir_run49(counter$31,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run49,[0,menhir_env,menhir_stack$1]);
              case 12:
               if(counter < 50)
                {var counter$23=counter + 1 | 0;
                 return menhir_run51(counter$23,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run51,[0,menhir_env,menhir_stack$1]);
              case 1:
              case 5:
              case 6:
              case 7:
              case 18:
              case 19:
               var
                _6=menhir_stack$1[3],
                _fg_=menhir_stack$1[1],
                _4$0=_fg_[3],
                _fh_=_fg_[1],
                _2$0=_fh_[3],
                match$0=_fh_[1],
                menhir_s$3=match$0[2],
                menhir_stack$4=match$0[1],
                v$2=[7,_2$0,_4$0,_6],
                menhir_stack$0=menhir_stack$4,
                menhir_s$0=menhir_s$3,
                v$0=v$2;
               continue
              }
           if(menhir_env[4])throw [0,Assert_failure,_cs_];
           menhir_env[4] = 1;
           var menhir_s$2=menhir_stack$1[2],menhir_stack$3=menhir_stack$1[1];
           return menhir_errorcase(menhir_env,menhir_stack$3,menhir_s$2);
          case 3:
           if(menhir_env[4])throw [0,Assert_failure,_ct_];
           var tok$0=menhir_env[3];
           if(typeof tok$0 === "number")
            switch(tok$0)
             {case 2:
               if(counter < 50)
                {var counter$57=counter + 1 | 0;
                 return menhir_run43(counter$57,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run43,[0,menhir_env,menhir_stack$1]);
              case 3:
               if(counter < 50)
                {var counter$47=counter + 1 | 0;
                 return menhir_run45(counter$47,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run45,[0,menhir_env,menhir_stack$1]);
              case 6:
               if(counter < 50)
                {var counter$39=counter + 1 | 0;
                 return menhir_run47(counter$39,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run47,[0,menhir_env,menhir_stack$1]);
              case 11:
               if(counter < 50)
                {var counter$32=counter + 1 | 0;
                 return menhir_run49(counter$32,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run49,[0,menhir_env,menhir_stack$1]);
              case 12:
               if(counter < 50)
                {var counter$24=counter + 1 | 0;
                 return menhir_run51(counter$24,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run51,[0,menhir_env,menhir_stack$1]);
              case 18:
               var
                menhir_env$0=menhir_discard(menhir_env),
                tok$1=menhir_env$0[3];
               if(typeof tok$1 === "number")
                switch(tok$1)
                 {case 0:
                   var _fi_=2;
                   if(counter < 50)
                    {var counter$16=counter + 1 | 0;
                     return menhir_run1$0
                             (counter$16,menhir_env$0,menhir_stack$1,_fi_)}
                   return caml_trampoline_return
                           (menhir_run1$0,[0,menhir_env$0,menhir_stack$1,_fi_]);
                  case 4:
                   var _fj_=2;
                   if(counter < 50)
                    {var counter$14=counter + 1 | 0;
                     return menhir_run2$0
                             (counter$14,menhir_env$0,menhir_stack$1,_fj_)}
                   return caml_trampoline_return
                           (menhir_run2$0,[0,menhir_env$0,menhir_stack$1,_fj_]);
                  case 8:
                   var _fk_=2;
                   if(counter < 50)
                    {var counter$12=counter + 1 | 0;
                     return menhir_run22$0
                             (counter$12,menhir_env$0,menhir_stack$1,_fk_)}
                   return caml_trampoline_return
                           (menhir_run22$0,[0,menhir_env$0,menhir_stack$1,_fk_]);
                  case 13:
                   var _fl_=2;
                   if(counter < 50)
                    {var counter$10=counter + 1 | 0;
                     return menhir_run26$0
                             (counter$10,menhir_env$0,menhir_stack$1,_fl_)}
                   return caml_trampoline_return
                           (menhir_run26$0,[0,menhir_env$0,menhir_stack$1,_fl_]);
                  case 15:
                   var _fm_=2;
                   if(counter < 50)
                    {var counter$6=counter + 1 | 0;
                     return menhir_run29$0
                             (counter$6,menhir_env$0,menhir_stack$1,_fm_)}
                   return caml_trampoline_return
                           (menhir_run29$0,[0,menhir_env$0,menhir_stack$1,_fm_]);
                  case 16:
                   var _fn_=2;
                   if(counter < 50)
                    {var counter$2=counter + 1 | 0;
                     return menhir_run31$0
                             (counter$2,menhir_env$0,menhir_stack$1,_fn_)}
                   return caml_trampoline_return
                           (menhir_run31$0,[0,menhir_env$0,menhir_stack$1,_fn_]);
                  case 17:
                   var _fo_=2;
                   if(counter < 50)
                    {var counter$0=counter + 1 | 0;
                     return menhir_run39$0
                             (counter$0,menhir_env$0,menhir_stack$1,_fo_)}
                   return caml_trampoline_return
                           (menhir_run39$0,[0,menhir_env$0,menhir_stack$1,_fo_]);
                  default:
                   if(menhir_env$0[4])throw [0,Assert_failure,_cv_];
                   menhir_env$0[4] = 1;
                   return menhir_errorcase(menhir_env$0,menhir_stack$1,2)}
               else
                {if(0 === tok$1[0])
                  {var v$3=tok$1[1],_fp_=2;
                   if(counter < 50)
                    {var counter$8=counter + 1 | 0;
                     return menhir_run28$0
                             (counter$8,menhir_env$0,menhir_stack$1,_fp_,v$3)}
                   return caml_trampoline_return
                           (menhir_run28$0,[0,menhir_env$0,menhir_stack$1,_fp_,v$3])}
                 var v$4=tok$1[1],_fq_=2;
                 if(counter < 50)
                  {var counter$4=counter + 1 | 0;
                   return menhir_run30$0
                           (counter$4,menhir_env$0,menhir_stack$1,_fq_,v$4)}
                 return caml_trampoline_return
                         (menhir_run30$0,[0,menhir_env$0,menhir_stack$1,_fq_,v$4])}
              }
           if(menhir_env[4])throw [0,Assert_failure,_cu_];
           menhir_env[4] = 1;
           var menhir_s$4=menhir_stack$1[2],menhir_stack$5=menhir_stack$1[1];
           return menhir_errorcase(menhir_env,menhir_stack$5,menhir_s$4);
          case 4:
           if(menhir_env[4])throw [0,Assert_failure,_cw_];
           var tok$2=menhir_env[3];
           if(typeof tok$2 === "number")
            switch(tok$2)
             {case 2:
               if(counter < 50)
                {var counter$58=counter + 1 | 0;
                 return menhir_run43(counter$58,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run43,[0,menhir_env,menhir_stack$1]);
              case 3:
               if(counter < 50)
                {var counter$48=counter + 1 | 0;
                 return menhir_run45(counter$48,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run45,[0,menhir_env,menhir_stack$1]);
              case 6:
               if(counter < 50)
                {var counter$40=counter + 1 | 0;
                 return menhir_run47(counter$40,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run47,[0,menhir_env,menhir_stack$1]);
              case 11:
               if(counter < 50)
                {var counter$33=counter + 1 | 0;
                 return menhir_run49(counter$33,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run49,[0,menhir_env,menhir_stack$1]);
              case 12:
               if(counter < 50)
                {var counter$25=counter + 1 | 0;
                 return menhir_run51(counter$25,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run51,[0,menhir_env,menhir_stack$1]);
              case 1:
              case 5:
              case 7:
              case 18:
              case 19:
               var
                _5=menhir_stack$1[3],
                _fr_=menhir_stack$1[1],
                _3=_fr_[2],
                _fs_=_fr_[1],
                _2$1=_fs_[3],
                match$1=_fs_[1],
                menhir_s$6=match$1[2],
                menhir_stack$7=match$1[1],
                v$5=[3,_2$1,_3,0,_5],
                menhir_stack$0=menhir_stack$7,
                menhir_s$0=menhir_s$6,
                v$0=v$5;
               continue
              }
           if(menhir_env[4])throw [0,Assert_failure,_cx_];
           menhir_env[4] = 1;
           var menhir_s$5=menhir_stack$1[2],menhir_stack$6=menhir_stack$1[1];
           return menhir_errorcase(menhir_env,menhir_stack$6,menhir_s$5);
          case 5:
           if(menhir_env[4])throw [0,Assert_failure,_cy_];
           var tok$3=menhir_env[3];
           if(typeof tok$3 === "number")
            switch(tok$3)
             {case 2:
               if(counter < 50)
                {var counter$59=counter + 1 | 0;
                 return menhir_run43(counter$59,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run43,[0,menhir_env,menhir_stack$1]);
              case 3:
               if(counter < 50)
                {var counter$49=counter + 1 | 0;
                 return menhir_run45(counter$49,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run45,[0,menhir_env,menhir_stack$1]);
              case 1:
              case 5:
              case 6:
              case 7:
              case 11:
              case 12:
              case 18:
              case 19:
               var
                _3$0=menhir_stack$1[3],
                match$2=menhir_stack$1[1],
                _1=match$2[3],
                menhir_s$8=match$2[2],
                menhir_stack$9=match$2[1],
                v$6=[2,1,_1,_3$0],
                menhir_stack$0=menhir_stack$9,
                menhir_s$0=menhir_s$8,
                v$0=v$6;
               continue
              }
           if(menhir_env[4])throw [0,Assert_failure,_cz_];
           menhir_env[4] = 1;
           var menhir_s$7=menhir_stack$1[2],menhir_stack$8=menhir_stack$1[1];
           return menhir_errorcase(menhir_env,menhir_stack$8,menhir_s$7);
          case 6:
           if(menhir_env[4])throw [0,Assert_failure,_cA_];
           var tok$4=menhir_env[3];
           if(typeof tok$4 === "number")
            switch(tok$4)
             {case 2:
               if(counter < 50)
                {var counter$60=counter + 1 | 0;
                 return menhir_run43(counter$60,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run43,[0,menhir_env,menhir_stack$1]);
              case 3:
               if(counter < 50)
                {var counter$50=counter + 1 | 0;
                 return menhir_run45(counter$50,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run45,[0,menhir_env,menhir_stack$1]);
              case 1:
              case 5:
              case 6:
              case 7:
              case 11:
              case 12:
              case 18:
              case 19:
               var
                _3$1=menhir_stack$1[3],
                match$3=menhir_stack$1[1],
                _1$0=match$3[3],
                menhir_s$10=match$3[2],
                menhir_stack$11=match$3[1],
                v$7=[2,0,_1$0,_3$1],
                menhir_stack$0=menhir_stack$11,
                menhir_s$0=menhir_s$10,
                v$0=v$7;
               continue
              }
           if(menhir_env[4])throw [0,Assert_failure,_cB_];
           menhir_env[4] = 1;
           var menhir_s$9=menhir_stack$1[2],menhir_stack$10=menhir_stack$1[1];
           return menhir_errorcase(menhir_env,menhir_stack$10,menhir_s$9);
          case 7:
           if(menhir_env[4])throw [0,Assert_failure,_cC_];
           var tok$5=menhir_env[3];
           if(typeof tok$5 === "number")
            switch(tok$5)
             {case 2:
               if(counter < 50)
                {var counter$61=counter + 1 | 0;
                 return menhir_run43(counter$61,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run43,[0,menhir_env,menhir_stack$1]);
              case 3:
               if(counter < 50)
                {var counter$51=counter + 1 | 0;
                 return menhir_run45(counter$51,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run45,[0,menhir_env,menhir_stack$1]);
              case 6:
               if(counter < 50)
                {var counter$41=counter + 1 | 0;
                 return menhir_run47(counter$41,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run47,[0,menhir_env,menhir_stack$1]);
              case 11:
               if(counter < 50)
                {var counter$34=counter + 1 | 0;
                 return menhir_run49(counter$34,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run49,[0,menhir_env,menhir_stack$1]);
              case 12:
               if(counter < 50)
                {var counter$26=counter + 1 | 0;
                 return menhir_run51(counter$26,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run51,[0,menhir_env,menhir_stack$1]);
              case 1:
              case 5:
              case 7:
              case 18:
              case 19:
               var
                _3$2=menhir_stack$1[3],
                match$4=menhir_stack$1[1],
                _1$1=match$4[3],
                menhir_s$12=match$4[2],
                menhir_stack$13=match$4[1],
                v$8=[8,_1$1,_3$2],
                menhir_stack$0=menhir_stack$13,
                menhir_s$0=menhir_s$12,
                v$0=v$8;
               continue
              }
           if(menhir_env[4])throw [0,Assert_failure,_cD_];
           menhir_env[4] = 1;
           var
            menhir_s$11=menhir_stack$1[2],
            menhir_stack$12=menhir_stack$1[1];
           return menhir_errorcase(menhir_env,menhir_stack$12,menhir_s$11);
          case 8:
           var
            _3$3=menhir_stack$1[3],
            match$5=menhir_stack$1[1],
            _1$2=match$5[3],
            menhir_s$13=match$5[2],
            menhir_stack$14=match$5[1],
            v$9=[2,3,_1$2,_3$3],
            menhir_stack$0=menhir_stack$14,
            menhir_s$0=menhir_s$13,
            v$0=v$9;
           continue;
          case 9:
           var
            _3$4=menhir_stack$1[3],
            match$6=menhir_stack$1[1],
            _1$3=match$6[3],
            menhir_s$14=match$6[2],
            menhir_stack$15=match$6[1],
            v$10=[2,2,_1$3,_3$4],
            menhir_stack$0=menhir_stack$15,
            menhir_s$0=menhir_s$14,
            v$0=v$10;
           continue;
          case 11:
           if(menhir_env[4])throw [0,Assert_failure,_cE_];
           var tok$6=menhir_env[3];
           if(typeof tok$6 === "number")
            switch(tok$6)
             {case 2:
               if(counter < 50)
                {var counter$62=counter + 1 | 0;
                 return menhir_run43(counter$62,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run43,[0,menhir_env,menhir_stack$1]);
              case 3:
               if(counter < 50)
                {var counter$52=counter + 1 | 0;
                 return menhir_run45(counter$52,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run45,[0,menhir_env,menhir_stack$1]);
              case 6:
               if(counter < 50)
                {var counter$42=counter + 1 | 0;
                 return menhir_run47(counter$42,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run47,[0,menhir_env,menhir_stack$1]);
              case 11:
               if(counter < 50)
                {var counter$35=counter + 1 | 0;
                 return menhir_run49(counter$35,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run49,[0,menhir_env,menhir_stack$1]);
              case 12:
               if(counter < 50)
                {var counter$27=counter + 1 | 0;
                 return menhir_run51(counter$27,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run51,[0,menhir_env,menhir_stack$1]);
              case 1:
              case 5:
              case 7:
              case 18:
              case 19:
               var
                _9=menhir_stack$1[3],
                _ft_=menhir_stack$1[1],
                _6$0=_ft_[3],
                _fu_=_ft_[1],
                _4$1=_fu_[2],
                _fv_=_fu_[1],
                _2$2=_fv_[3],
                match$7=_fv_[1],
                menhir_s$16=match$7[2],
                menhir_stack$17=match$7[1],
                v$11=[3,_2$2,_4$1,[0,_6$0],_9],
                menhir_stack$0=menhir_stack$17,
                menhir_s$0=menhir_s$16,
                v$0=v$11;
               continue
              }
           if(menhir_env[4])throw [0,Assert_failure,_cF_];
           menhir_env[4] = 1;
           var
            menhir_s$15=menhir_stack$1[2],
            menhir_stack$16=menhir_stack$1[1];
           return menhir_errorcase(menhir_env,menhir_stack$16,menhir_s$15);
          case 14:
           if(menhir_env[4])throw [0,Assert_failure,_cG_];
           var tok$7=menhir_env[3];
           if(typeof tok$7 === "number")
            switch(tok$7)
             {case 1:
               var
                menhir_env$1=menhir_discard(menhir_env),
                tok$8=menhir_env$1[3];
               if(typeof tok$8 === "number")
                switch(tok$8)
                 {case 0:
                   var _fw_=3;
                   if(counter < 50)
                    {var counter$17=counter + 1 | 0;
                     return menhir_run1$0
                             (counter$17,menhir_env$1,menhir_stack$1,_fw_)}
                   return caml_trampoline_return
                           (menhir_run1$0,[0,menhir_env$1,menhir_stack$1,_fw_]);
                  case 4:
                   var _fx_=3;
                   if(counter < 50)
                    {var counter$15=counter + 1 | 0;
                     return menhir_run2$0
                             (counter$15,menhir_env$1,menhir_stack$1,_fx_)}
                   return caml_trampoline_return
                           (menhir_run2$0,[0,menhir_env$1,menhir_stack$1,_fx_]);
                  case 8:
                   var _fy_=3;
                   if(counter < 50)
                    {var counter$13=counter + 1 | 0;
                     return menhir_run22$0
                             (counter$13,menhir_env$1,menhir_stack$1,_fy_)}
                   return caml_trampoline_return
                           (menhir_run22$0,[0,menhir_env$1,menhir_stack$1,_fy_]);
                  case 13:
                   var _fz_=3;
                   if(counter < 50)
                    {var counter$11=counter + 1 | 0;
                     return menhir_run26$0
                             (counter$11,menhir_env$1,menhir_stack$1,_fz_)}
                   return caml_trampoline_return
                           (menhir_run26$0,[0,menhir_env$1,menhir_stack$1,_fz_]);
                  case 15:
                   var _fA_=3;
                   if(counter < 50)
                    {var counter$7=counter + 1 | 0;
                     return menhir_run29$0
                             (counter$7,menhir_env$1,menhir_stack$1,_fA_)}
                   return caml_trampoline_return
                           (menhir_run29$0,[0,menhir_env$1,menhir_stack$1,_fA_]);
                  case 16:
                   var _fB_=3;
                   if(counter < 50)
                    {var counter$3=counter + 1 | 0;
                     return menhir_run31$0
                             (counter$3,menhir_env$1,menhir_stack$1,_fB_)}
                   return caml_trampoline_return
                           (menhir_run31$0,[0,menhir_env$1,menhir_stack$1,_fB_]);
                  case 17:
                   var _fC_=3;
                   if(counter < 50)
                    {var counter$1=counter + 1 | 0;
                     return menhir_run39$0
                             (counter$1,menhir_env$1,menhir_stack$1,_fC_)}
                   return caml_trampoline_return
                           (menhir_run39$0,[0,menhir_env$1,menhir_stack$1,_fC_]);
                  default:
                   if(menhir_env$1[4])throw [0,Assert_failure,_cI_];
                   menhir_env$1[4] = 1;
                   return menhir_errorcase(menhir_env$1,menhir_stack$1,3)}
               else
                {if(0 === tok$8[0])
                  {var v$12=tok$8[1],_fD_=3;
                   if(counter < 50)
                    {var counter$9=counter + 1 | 0;
                     return menhir_run28$0
                             (counter$9,menhir_env$1,menhir_stack$1,_fD_,v$12)}
                   return caml_trampoline_return
                           (menhir_run28$0,[0,menhir_env$1,menhir_stack$1,_fD_,v$12])}
                 var v$13=tok$8[1],_fE_=3;
                 if(counter < 50)
                  {var counter$5=counter + 1 | 0;
                   return menhir_run30$0
                           (counter$5,menhir_env$1,menhir_stack$1,_fE_,v$13)}
                 return caml_trampoline_return
                         (menhir_run30$0,[0,menhir_env$1,menhir_stack$1,_fE_,v$13])}
              case 2:
               if(counter < 50)
                {var counter$63=counter + 1 | 0;
                 return menhir_run43(counter$63,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run43,[0,menhir_env,menhir_stack$1]);
              case 3:
               if(counter < 50)
                {var counter$53=counter + 1 | 0;
                 return menhir_run45(counter$53,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run45,[0,menhir_env,menhir_stack$1]);
              case 6:
               if(counter < 50)
                {var counter$43=counter + 1 | 0;
                 return menhir_run47(counter$43,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run47,[0,menhir_env,menhir_stack$1]);
              case 11:
               if(counter < 50)
                {var counter$36=counter + 1 | 0;
                 return menhir_run49(counter$36,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run49,[0,menhir_env,menhir_stack$1]);
              case 12:
               if(counter < 50)
                {var counter$28=counter + 1 | 0;
                 return menhir_run51(counter$28,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run51,[0,menhir_env,menhir_stack$1])
              }
           if(menhir_env[4])throw [0,Assert_failure,_cH_];
           menhir_env[4] = 1;
           var
            menhir_s$17=menhir_stack$1[2],
            menhir_stack$18=menhir_stack$1[1];
           return menhir_errorcase(menhir_env,menhir_stack$18,menhir_s$17);
          case 15:
           if(menhir_env[4])throw [0,Assert_failure,_cJ_];
           var tok$9=menhir_env[3];
           if(typeof tok$9 === "number")
            switch(tok$9)
             {case 2:
               if(counter < 50)
                {var counter$64=counter + 1 | 0;
                 return menhir_run43(counter$64,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run43,[0,menhir_env,menhir_stack$1]);
              case 3:
               if(counter < 50)
                {var counter$54=counter + 1 | 0;
                 return menhir_run45(counter$54,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run45,[0,menhir_env,menhir_stack$1]);
              case 6:
               if(counter < 50)
                {var counter$44=counter + 1 | 0;
                 return menhir_run47(counter$44,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run47,[0,menhir_env,menhir_stack$1]);
              case 7:
               var
                menhir_env$2=menhir_discard(menhir_env),
                _2$3=menhir_stack$1[3],
                match$8=menhir_stack$1[1],
                menhir_s$19=match$8[2],
                menhir_stack$20=match$8[1];
               if(counter < 50)
                {var counter$18=counter + 1 | 0;
                 return menhir_goto_SimpleExpr
                         (counter$18,menhir_env$2,menhir_stack$20,menhir_s$19,_2$3)}
               return caml_trampoline_return
                       (menhir_goto_SimpleExpr,
                        [0,menhir_env$2,menhir_stack$20,menhir_s$19,_2$3]);
              case 11:
               if(counter < 50)
                {var counter$37=counter + 1 | 0;
                 return menhir_run49(counter$37,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run49,[0,menhir_env,menhir_stack$1]);
              case 12:
               if(counter < 50)
                {var counter$29=counter + 1 | 0;
                 return menhir_run51(counter$29,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run51,[0,menhir_env,menhir_stack$1]);
              case 19:
               var
                menhir_env$3=menhir_discard(menhir_env),
                tok$10=menhir_env$3[3];
               if(typeof tok$10 === "number")
                if(19 === tok$10)
                 {var
                   menhir_env$4=menhir_discard(menhir_env$3),
                   tok$11=menhir_env$4[3];
                  if(typeof tok$11 === "number")
                   if(10 <= tok$11)
                    {var switcher=tok$11 - 10 | 0;
                     switch(switcher)
                      {case 0:
                        var _fF_=1;
                        if(counter < 50)
                         {var counter$22=counter + 1 | 0;
                          return menhir_run6
                                  (counter$22,menhir_env$4,menhir_stack$1,_fF_)}
                        return caml_trampoline_return
                                (menhir_run6,[0,menhir_env$4,menhir_stack$1,_fF_]);
                       case 3:
                        var _fG_=1;
                        if(counter < 50)
                         {var counter$21=counter + 1 | 0;
                          return menhir_run7
                                  (counter$21,menhir_env$4,menhir_stack$1,_fG_)}
                        return caml_trampoline_return
                                (menhir_run7,[0,menhir_env$4,menhir_stack$1,_fG_]);
                       case 4:
                        var _fH_=1;
                        if(counter < 50)
                         {var counter$20=counter + 1 | 0;
                          return menhir_run8
                                  (counter$20,menhir_env$4,menhir_stack$1,_fH_)}
                        return caml_trampoline_return
                                (menhir_run8,[0,menhir_env$4,menhir_stack$1,_fH_]);
                       case 11:
                        var _fI_=1;
                        if(counter < 50)
                         {var counter$19=counter + 1 | 0;
                          return menhir_run9
                                  (counter$19,menhir_env$4,menhir_stack$1,_fI_)}
                        return caml_trampoline_return
                                (menhir_run9,[0,menhir_env$4,menhir_stack$1,_fI_])
                       }}
                  if(menhir_env$4[4])throw [0,Assert_failure,_cL_];
                  menhir_env$4[4] = 1;
                  return menhir_errorcase(menhir_env$4,menhir_stack$1,1)}
               if(menhir_env$3[4])throw [0,Assert_failure,_cM_];
               menhir_env$3[4] = 1;
               var
                menhir_s$20=menhir_stack$1[2],
                menhir_stack$21=menhir_stack$1[1];
               return menhir_errorcase
                       (menhir_env$3,menhir_stack$21,menhir_s$20)
              }
           if(menhir_env[4])throw [0,Assert_failure,_cK_];
           menhir_env[4] = 1;
           var
            menhir_s$18=menhir_stack$1[2],
            menhir_stack$19=menhir_stack$1[1];
           return menhir_errorcase(menhir_env,menhir_stack$19,menhir_s$18);
          case 16:
           var
            _3$5=menhir_stack$1[3],
            _fJ_=menhir_stack$1[1],
            _2$4=_fJ_[3],
            match$9=_fJ_[1],
            menhir_s$21=match$9[2],
            menhir_stack$22=match$9[1],
            v$14=[6,_3$5,_2$4],
            menhir_stack$0=menhir_stack$22,
            menhir_s$0=menhir_s$21,
            v$0=v$14;
           continue;
          case 19:
           var
            _8=menhir_stack$1[3],
            _fK_=menhir_stack$1[1],
            _5$0=_fK_[3],
            _fL_=_fK_[1],
            _3$6=_fL_[2],
            match$10=_fL_[1],
            menhir_s$22=match$10[2],
            menhir_stack$23=match$10[1],
            v$15=[5,_3$6,[0,_5$0],_8],
            menhir_stack$0=menhir_stack$23,
            menhir_s$0=menhir_s$22,
            v$0=v$15;
           continue;
          case 25:
           if(menhir_env[4])throw [0,Assert_failure,_cN_];
           var tok$12=menhir_env[3];
           if(typeof tok$12 === "number")
            switch(tok$12)
             {case 2:
               if(counter < 50)
                {var counter$65=counter + 1 | 0;
                 return menhir_run43(counter$65,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run43,[0,menhir_env,menhir_stack$1]);
              case 3:
               if(counter < 50)
                {var counter$55=counter + 1 | 0;
                 return menhir_run45(counter$55,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run45,[0,menhir_env,menhir_stack$1]);
              case 5:var v$16=menhir_stack$1[3];return v$16;
              case 6:
               if(counter < 50)
                {var counter$45=counter + 1 | 0;
                 return menhir_run47(counter$45,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run47,[0,menhir_env,menhir_stack$1]);
              case 11:
               if(counter < 50)
                {var counter$38=counter + 1 | 0;
                 return menhir_run49(counter$38,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run49,[0,menhir_env,menhir_stack$1]);
              case 12:
               if(counter < 50)
                {var counter$30=counter + 1 | 0;
                 return menhir_run51(counter$30,menhir_env,menhir_stack$1)}
               return caml_trampoline_return
                       (menhir_run51,[0,menhir_env,menhir_stack$1])
              }
           if(menhir_env[4])throw [0,Assert_failure,_cO_];
           menhir_env[4] = 1;
           var
            menhir_s$23=menhir_stack$1[2],
            menhir_stack$24=menhir_stack$1[1];
           return menhir_errorcase(menhir_env,menhir_stack$24,menhir_s$23);
          default:return menhir_fail(0)}}}
    function menhir_run6(counter,menhir_env,menhir_stack,menhir_s)
     {var menhir_env$0=menhir_discard(menhir_env),v=3;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_AType
                (counter$0,menhir_env$0,menhir_stack,menhir_s,v)}
      return caml_trampoline_return
              (menhir_goto_AType,[0,menhir_env$0,menhir_stack,menhir_s,v])}
    function menhir_run7(counter,menhir_env,menhir_stack,menhir_s)
     {var
       menhir_env$0=menhir_env,
       menhir_stack$0=menhir_stack,
       menhir_s$0=menhir_s;
      for(;;)
       {var
         menhir_stack$1=[0,menhir_stack$0,menhir_s$0],
         menhir_env$1=menhir_discard(menhir_env$0),
         tok=menhir_env$1[3];
        if(typeof tok === "number")
         if(10 <= tok)
          {var switcher=tok - 10 | 0;
           switch(switcher)
            {case 0:
              var _fc_=23;
              if(counter < 50)
               {var counter$2=counter + 1 | 0;
                return menhir_run6(counter$2,menhir_env$1,menhir_stack$1,_fc_)}
              return caml_trampoline_return
                      (menhir_run6,[0,menhir_env$1,menhir_stack$1,_fc_]);
             case 3:
              var
               menhir_env$0=menhir_env$1,
               menhir_stack$0=menhir_stack$1,
               menhir_s$0=23;
              continue;
             case 4:
              var _fd_=23;
              if(counter < 50)
               {var counter$1=counter + 1 | 0;
                return menhir_run8(counter$1,menhir_env$1,menhir_stack$1,_fd_)}
              return caml_trampoline_return
                      (menhir_run8,[0,menhir_env$1,menhir_stack$1,_fd_]);
             case 11:
              var _fe_=23;
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return menhir_run9(counter$0,menhir_env$1,menhir_stack$1,_fe_)}
              return caml_trampoline_return
                      (menhir_run9,[0,menhir_env$1,menhir_stack$1,_fe_])
             }}
        if(menhir_env$1[4])throw [0,Assert_failure,_cP_];
        menhir_env$1[4] = 1;
        return menhir_errorcase(menhir_env$1,menhir_stack$1,23)}}
    function menhir_run8(counter,menhir_env,menhir_stack,menhir_s)
     {var menhir_env$0=menhir_discard(menhir_env),v=1;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_AType
                (counter$0,menhir_env$0,menhir_stack,menhir_s,v)}
      return caml_trampoline_return
              (menhir_goto_AType,[0,menhir_env$0,menhir_stack,menhir_s,v])}
    function menhir_run9(counter,menhir_env,menhir_stack,menhir_s)
     {var menhir_env$0=menhir_discard(menhir_env),v=0;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_AType
                (counter$0,menhir_env$0,menhir_stack,menhir_s,v)}
      return caml_trampoline_return
              (menhir_goto_AType,[0,menhir_env$0,menhir_stack,menhir_s,v])}
    function menhir_reduce18(counter,menhir_env,menhir_stack,menhir_s)
     {var v=0;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_OptionalAnswerTypeAnnot
                (counter$0,menhir_env,menhir_stack,menhir_s,v)}
      return caml_trampoline_return
              (menhir_goto_OptionalAnswerTypeAnnot,
               [0,menhir_env,menhir_stack,menhir_s,v])}
    function menhir_run23(counter,menhir_env,menhir_stack,menhir_s)
     {var
       menhir_stack$0=[0,menhir_stack,menhir_s],
       menhir_env$0=menhir_discard(menhir_env),
       tok=menhir_env$0[3];
      if(typeof tok === "number")
       if(10 <= tok)
        {var switcher=tok - 10 | 0;
         switch(switcher)
          {case 0:
            var _e__=17;
            if(counter < 50)
             {var counter$3=counter + 1 | 0;
              return menhir_run6(counter$3,menhir_env$0,menhir_stack$0,_e__)}
            return caml_trampoline_return
                    (menhir_run6,[0,menhir_env$0,menhir_stack$0,_e__]);
           case 3:
            var _e$_=17;
            if(counter < 50)
             {var counter$2=counter + 1 | 0;
              return menhir_run7(counter$2,menhir_env$0,menhir_stack$0,_e$_)}
            return caml_trampoline_return
                    (menhir_run7,[0,menhir_env$0,menhir_stack$0,_e$_]);
           case 4:
            var _fa_=17;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return menhir_run8(counter$1,menhir_env$0,menhir_stack$0,_fa_)}
            return caml_trampoline_return
                    (menhir_run8,[0,menhir_env$0,menhir_stack$0,_fa_]);
           case 11:
            var _fb_=17;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return menhir_run9(counter$0,menhir_env$0,menhir_stack$0,_fb_)}
            return caml_trampoline_return
                    (menhir_run9,[0,menhir_env$0,menhir_stack$0,_fb_])
           }}
      if(menhir_env$0[4])throw [0,Assert_failure,_cQ_];
      menhir_env$0[4] = 1;
      return menhir_errorcase(menhir_env$0,menhir_stack$0,17)}
    function menhir_goto_SimpleExpr
     (counter,menhir_env,menhir_stack,menhir_s,v)
     {var menhir_stack$0=[0,menhir_stack,menhir_s,v];
      switch(menhir_s)
       {case 10:
         var
          _2=menhir_stack$0[3],
          match=menhir_stack$0[1],
          _1$0=match[3],
          menhir_s$1=match[2],
          menhir_stack$2=match[1],
          v$2=[4,_1$0,_2];
         if(counter < 50)
          {var counter$5=counter + 1 | 0;
           return menhir_goto_Expr
                   (counter$5,menhir_env,menhir_stack$2,menhir_s$1,v$2)}
         return caml_trampoline_return
                 (menhir_goto_Expr,
                  [0,menhir_env,menhir_stack$2,menhir_s$1,v$2]);
        case 1:
        case 12:
        case 13:
        case 17:
        case 18:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:return menhir_fail(0);
        default:
         if(menhir_env[4])throw [0,Assert_failure,_cR_];
         var tok=menhir_env[3];
         if(typeof tok === "number")
          switch(tok)
           {case 0:
             var _e5_=10;
             if(counter < 50)
              {var counter$4=counter + 1 | 0;
               return menhir_run1$0(counter$4,menhir_env,menhir_stack$0,_e5_)}
             return caml_trampoline_return
                     (menhir_run1$0,[0,menhir_env,menhir_stack$0,_e5_]);
            case 13:
             var _e6_=10;
             if(counter < 50)
              {var counter$3=counter + 1 | 0;
               return menhir_run26$0(counter$3,menhir_env,menhir_stack$0,_e6_)}
             return caml_trampoline_return
                     (menhir_run26$0,[0,menhir_env,menhir_stack$0,_e6_]);
            case 17:
             var _e7_=10;
             if(counter < 50)
              {var counter$0=counter + 1 | 0;
               return menhir_run39$0(counter$0,menhir_env,menhir_stack$0,_e7_)}
             return caml_trampoline_return
                     (menhir_run39$0,[0,menhir_env,menhir_stack$0,_e7_]);
            case 4:
            case 8:
            case 9:
            case 10:
            case 14:
            case 15:
            case 16:
            case 20:
            case 21:
             if(menhir_env[4])throw [0,Assert_failure,_cS_];
             menhir_env[4] = 1;
             return menhir_errorcase(menhir_env,menhir_stack$0,10);
            default:
             var
              _1=menhir_stack$0[3],
              menhir_s$0=menhir_stack$0[2],
              menhir_stack$1=menhir_stack$0[1];
             if(counter < 50)
              {var counter$6=counter + 1 | 0;
               return menhir_goto_Expr
                       (counter$6,menhir_env,menhir_stack$1,menhir_s$0,_1)}
             return caml_trampoline_return
                     (menhir_goto_Expr,
                      [0,menhir_env,menhir_stack$1,menhir_s$0,_1])}
         else
          {if(0 === tok[0])
            {var v$0=tok[1],_e8_=10;
             if(counter < 50)
              {var counter$2=counter + 1 | 0;
               return menhir_run28$0
                       (counter$2,menhir_env,menhir_stack$0,_e8_,v$0)}
             return caml_trampoline_return
                     (menhir_run28$0,[0,menhir_env,menhir_stack$0,_e8_,v$0])}
           var v$1=tok[1],_e9_=10;
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return menhir_run30$0
                     (counter$1,menhir_env,menhir_stack$0,_e9_,v$1)}
           return caml_trampoline_return
                   (menhir_run30$0,[0,menhir_env,menhir_stack$0,_e9_,v$1])}}}
    function menhir_run1$0(counter,menhir_env,menhir_stack,menhir_s)
     {var menhir_env$0=menhir_discard(menhir_env);
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_SimpleExpr
                (counter$0,menhir_env$0,menhir_stack,menhir_s,v)}
      return caml_trampoline_return
              (menhir_goto_SimpleExpr,
               [0,menhir_env$0,menhir_stack,menhir_s,v])}
    function menhir_run2$0(counter,menhir_env,menhir_stack,menhir_s)
     {var
       menhir_env$0=menhir_env,
       menhir_stack$0=menhir_stack,
       menhir_s$0=menhir_s;
      for(;;)
       {var
         menhir_stack$1=[0,menhir_stack$0,menhir_s$0],
         menhir_env$1=menhir_discard(menhir_env$0),
         tok=menhir_env$1[3];
        if(typeof tok === "number")
         {if(13 === tok)
           {var
             menhir_env$2=menhir_discard(menhir_env$1),
             tok$0=menhir_env$2[3];
            if(typeof tok$0 !== "number" && 1 === tok$0[0])
             {var
               v=tok$0[1],
               menhir_stack$4=[0,menhir_stack$1,v],
               menhir_env$3=menhir_discard(menhir_env$2),
               tok$1=menhir_env$3[3];
              if(typeof tok$1 === "number")
               if(19 === tok$1)
                {var
                  menhir_env$4=menhir_discard(menhir_env$3),
                  tok$2=menhir_env$4[3];
                 if(typeof tok$2 === "number")
                  if(10 <= tok$2)
                   {var switcher=tok$2 - 10 | 0;
                    switch(switcher)
                     {case 0:
                       var _eT_=24;
                       if(counter < 50)
                        {var counter$11=counter + 1 | 0;
                         return menhir_run6
                                 (counter$11,menhir_env$4,menhir_stack$4,_eT_)}
                       return caml_trampoline_return
                               (menhir_run6,[0,menhir_env$4,menhir_stack$4,_eT_]);
                      case 3:
                       var _eU_=24;
                       if(counter < 50)
                        {var counter$10=counter + 1 | 0;
                         return menhir_run7
                                 (counter$10,menhir_env$4,menhir_stack$4,_eU_)}
                       return caml_trampoline_return
                               (menhir_run7,[0,menhir_env$4,menhir_stack$4,_eU_]);
                      case 4:
                       var _eV_=24;
                       if(counter < 50)
                        {var counter$9=counter + 1 | 0;
                         return menhir_run8
                                 (counter$9,menhir_env$4,menhir_stack$4,_eV_)}
                       return caml_trampoline_return
                               (menhir_run8,[0,menhir_env$4,menhir_stack$4,_eV_]);
                      case 11:
                       var _eW_=24;
                       if(counter < 50)
                        {var counter$8=counter + 1 | 0;
                         return menhir_run9
                                 (counter$8,menhir_env$4,menhir_stack$4,_eW_)}
                       return caml_trampoline_return
                               (menhir_run9,[0,menhir_env$4,menhir_stack$4,_eW_])
                      }}
                 if(menhir_env$4[4])throw [0,Assert_failure,_cV_];
                 menhir_env$4[4] = 1;
                 return menhir_errorcase(menhir_env$4,menhir_stack$4,24)}
              if(menhir_env$3[4])throw [0,Assert_failure,_cW_];
              menhir_env$3[4] = 1;
              var
               match=menhir_stack$4[1],
               menhir_s$3=match[2],
               menhir_stack$5=match[1];
              return menhir_errorcase(menhir_env$3,menhir_stack$5,menhir_s$3)}
            if(menhir_env$2[4])throw [0,Assert_failure,_cU_];
            menhir_env$2[4] = 1;
            var menhir_s$2=menhir_stack$1[2],menhir_stack$3=menhir_stack$1[1];
            return menhir_errorcase(menhir_env$2,menhir_stack$3,menhir_s$2)}}
        else
         if(1 === tok[0])
          {var
            v$0=tok[1],
            menhir_stack$6=[0,menhir_stack$1,v$0],
            menhir_env$5=menhir_discard(menhir_env$1),
            tok$3=menhir_env$5[3];
           if(typeof tok$3 === "number")
            if(9 === tok$3)
             {var
               menhir_env$6=menhir_discard(menhir_env$5),
               tok$4=menhir_env$6[3];
              if(typeof tok$4 === "number")
               switch(tok$4)
                {case 0:
                  var _eX_=0;
                  if(counter < 50)
                   {var counter$7=counter + 1 | 0;
                    return menhir_run1$0
                            (counter$7,menhir_env$6,menhir_stack$6,_eX_)}
                  return caml_trampoline_return
                          (menhir_run1$0,[0,menhir_env$6,menhir_stack$6,_eX_]);
                 case 4:
                  var
                   menhir_env$0=menhir_env$6,
                   menhir_stack$0=menhir_stack$6,
                   menhir_s$0=0;
                  continue;
                 case 8:
                  var _eY_=0;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run22$0
                            (counter$6,menhir_env$6,menhir_stack$6,_eY_)}
                  return caml_trampoline_return
                          (menhir_run22$0,[0,menhir_env$6,menhir_stack$6,_eY_]);
                 case 13:
                  var _eZ_=0;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run26$0
                            (counter$5,menhir_env$6,menhir_stack$6,_eZ_)}
                  return caml_trampoline_return
                          (menhir_run26$0,[0,menhir_env$6,menhir_stack$6,_eZ_]);
                 case 15:
                  var _e0_=0;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run29$0
                            (counter$3,menhir_env$6,menhir_stack$6,_e0_)}
                  return caml_trampoline_return
                          (menhir_run29$0,[0,menhir_env$6,menhir_stack$6,_e0_]);
                 case 16:
                  var _e1_=0;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run31$0
                            (counter$1,menhir_env$6,menhir_stack$6,_e1_)}
                  return caml_trampoline_return
                          (menhir_run31$0,[0,menhir_env$6,menhir_stack$6,_e1_]);
                 case 17:
                  var _e2_=0;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run39$0
                            (counter$0,menhir_env$6,menhir_stack$6,_e2_)}
                  return caml_trampoline_return
                          (menhir_run39$0,[0,menhir_env$6,menhir_stack$6,_e2_]);
                 default:
                  if(menhir_env$6[4])throw [0,Assert_failure,_cX_];
                  menhir_env$6[4] = 1;
                  return menhir_errorcase(menhir_env$6,menhir_stack$6,0)}
              else
               {if(0 === tok$4[0])
                 {var v$1=tok$4[1],_e3_=0;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run28$0
                            (counter$4,menhir_env$6,menhir_stack$6,_e3_,v$1)}
                  return caml_trampoline_return
                          (menhir_run28$0,[0,menhir_env$6,menhir_stack$6,_e3_,v$1])}
                var v$2=tok$4[1],_e4_=0;
                if(counter < 50)
                 {var counter$2=counter + 1 | 0;
                  return menhir_run30$0
                          (counter$2,menhir_env$6,menhir_stack$6,_e4_,v$2)}
                return caml_trampoline_return
                        (menhir_run30$0,[0,menhir_env$6,menhir_stack$6,_e4_,v$2])}}
           if(menhir_env$5[4])throw [0,Assert_failure,_cY_];
           menhir_env$5[4] = 1;
           var
            match$0=menhir_stack$6[1],
            menhir_s$4=match$0[2],
            menhir_stack$7=match$0[1];
           return menhir_errorcase(menhir_env$5,menhir_stack$7,menhir_s$4)}
        if(menhir_env$1[4])throw [0,Assert_failure,_cT_];
        menhir_env$1[4] = 1;
        var menhir_s$1=menhir_stack$1[2],menhir_stack$2=menhir_stack$1[1];
        return menhir_errorcase(menhir_env$1,menhir_stack$2,menhir_s$1)}}
    function menhir_run22$0(counter,menhir_env,menhir_stack,menhir_s)
     {var
       menhir_stack$0=[0,menhir_stack,menhir_s],
       menhir_env$0=menhir_discard(menhir_env),
       tok=menhir_env$0[3];
      if(typeof tok === "number")
       switch(tok)
        {case 20:
          var _eS_=18;
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return menhir_run23(counter$0,menhir_env$0,menhir_stack$0,_eS_)}
          return caml_trampoline_return
                  (menhir_run23,[0,menhir_env$0,menhir_stack$0,_eS_]);
         case 0:
         case 4:
         case 8:
         case 13:
         case 15:
         case 16:
         case 17:break;
         default:
          if(menhir_env$0[4])throw [0,Assert_failure,_cZ_];
          menhir_env$0[4] = 1;
          return menhir_errorcase(menhir_env$0,menhir_stack$0,18)}
      var _eR_=18;
      if(counter < 50)
       {var counter$1=counter + 1 | 0;
        return menhir_reduce18(counter$1,menhir_env$0,menhir_stack$0,_eR_)}
      return caml_trampoline_return
              (menhir_reduce18,[0,menhir_env$0,menhir_stack$0,_eR_])}
    function menhir_run26$0(counter,menhir_env,menhir_stack,menhir_s)
     {var
       menhir_env$0=menhir_env,
       menhir_stack$0=menhir_stack,
       menhir_s$0=menhir_s;
      for(;;)
       {var
         menhir_stack$1=[0,menhir_stack$0,menhir_s$0],
         menhir_env$1=menhir_discard(menhir_env$0),
         tok=menhir_env$1[3];
        if(typeof tok === "number")
         switch(tok)
          {case 0:
            var _eJ_=15;
            if(counter < 50)
             {var counter$7=counter + 1 | 0;
              return menhir_run1$0(counter$7,menhir_env$1,menhir_stack$1,_eJ_)}
            return caml_trampoline_return
                    (menhir_run1$0,[0,menhir_env$1,menhir_stack$1,_eJ_]);
           case 4:
            var _eK_=15;
            if(counter < 50)
             {var counter$6=counter + 1 | 0;
              return menhir_run2$0(counter$6,menhir_env$1,menhir_stack$1,_eK_)}
            return caml_trampoline_return
                    (menhir_run2$0,[0,menhir_env$1,menhir_stack$1,_eK_]);
           case 7:
            var
             menhir_env$2=menhir_discard(menhir_env$1),
             menhir_s$1=menhir_stack$1[2],
             menhir_stack$2=menhir_stack$1[1];
            if(counter < 50)
             {var counter$8=counter + 1 | 0;
              return menhir_goto_SimpleExpr
                      (counter$8,menhir_env$2,menhir_stack$2,menhir_s$1,v$0)}
            return caml_trampoline_return
                    (menhir_goto_SimpleExpr,
                     [0,menhir_env$2,menhir_stack$2,menhir_s$1,v$0]);
           case 8:
            var _eL_=15;
            if(counter < 50)
             {var counter$5=counter + 1 | 0;
              return menhir_run22$0
                      (counter$5,menhir_env$1,menhir_stack$1,_eL_)}
            return caml_trampoline_return
                    (menhir_run22$0,[0,menhir_env$1,menhir_stack$1,_eL_]);
           case 13:
            var
             menhir_env$0=menhir_env$1,
             menhir_stack$0=menhir_stack$1,
             menhir_s$0=15;
            continue;
           case 15:
            var _eM_=15;
            if(counter < 50)
             {var counter$3=counter + 1 | 0;
              return menhir_run29$0
                      (counter$3,menhir_env$1,menhir_stack$1,_eM_)}
            return caml_trampoline_return
                    (menhir_run29$0,[0,menhir_env$1,menhir_stack$1,_eM_]);
           case 16:
            var _eN_=15;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return menhir_run31$0
                      (counter$1,menhir_env$1,menhir_stack$1,_eN_)}
            return caml_trampoline_return
                    (menhir_run31$0,[0,menhir_env$1,menhir_stack$1,_eN_]);
           case 17:
            var _eO_=15;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return menhir_run39$0
                      (counter$0,menhir_env$1,menhir_stack$1,_eO_)}
            return caml_trampoline_return
                    (menhir_run39$0,[0,menhir_env$1,menhir_stack$1,_eO_]);
           default:
            if(menhir_env$1[4])throw [0,Assert_failure,_c0_];
            menhir_env$1[4] = 1;
            return menhir_errorcase(menhir_env$1,menhir_stack$1,15)}
        else
         {if(0 === tok[0])
           {var v=tok[1],_eP_=15;
            if(counter < 50)
             {var counter$4=counter + 1 | 0;
              return menhir_run28$0
                      (counter$4,menhir_env$1,menhir_stack$1,_eP_,v)}
            return caml_trampoline_return
                    (menhir_run28$0,[0,menhir_env$1,menhir_stack$1,_eP_,v])}
          var v$1=tok[1],_eQ_=15;
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return menhir_run30$0
                    (counter$2,menhir_env$1,menhir_stack$1,_eQ_,v$1)}
          return caml_trampoline_return
                  (menhir_run30$0,[0,menhir_env$1,menhir_stack$1,_eQ_,v$1])}}}
    function menhir_run28$0(counter,menhir_env,menhir_stack,menhir_s,_1)
     {var menhir_env$0=menhir_discard(menhir_env),v=[1,[1,_1]];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_SimpleExpr
                (counter$0,menhir_env$0,menhir_stack,menhir_s,v)}
      return caml_trampoline_return
              (menhir_goto_SimpleExpr,
               [0,menhir_env$0,menhir_stack,menhir_s,v])}
    function menhir_run29$0(counter,menhir_env,menhir_stack,menhir_s)
     {var
       menhir_env$0=menhir_env,
       menhir_stack$0=menhir_stack,
       menhir_s$0=menhir_s;
      for(;;)
       {var
         menhir_stack$1=[0,menhir_stack$0,menhir_s$0],
         menhir_env$1=menhir_discard(menhir_env$0),
         tok=menhir_env$1[3];
        if(typeof tok === "number")
         switch(tok)
          {case 0:
            var _eB_=14;
            if(counter < 50)
             {var counter$7=counter + 1 | 0;
              return menhir_run1$0(counter$7,menhir_env$1,menhir_stack$1,_eB_)}
            return caml_trampoline_return
                    (menhir_run1$0,[0,menhir_env$1,menhir_stack$1,_eB_]);
           case 4:
            var _eC_=14;
            if(counter < 50)
             {var counter$6=counter + 1 | 0;
              return menhir_run2$0(counter$6,menhir_env$1,menhir_stack$1,_eC_)}
            return caml_trampoline_return
                    (menhir_run2$0,[0,menhir_env$1,menhir_stack$1,_eC_]);
           case 8:
            var _eD_=14;
            if(counter < 50)
             {var counter$5=counter + 1 | 0;
              return menhir_run22$0
                      (counter$5,menhir_env$1,menhir_stack$1,_eD_)}
            return caml_trampoline_return
                    (menhir_run22$0,[0,menhir_env$1,menhir_stack$1,_eD_]);
           case 13:
            var _eE_=14;
            if(counter < 50)
             {var counter$4=counter + 1 | 0;
              return menhir_run26$0
                      (counter$4,menhir_env$1,menhir_stack$1,_eE_)}
            return caml_trampoline_return
                    (menhir_run26$0,[0,menhir_env$1,menhir_stack$1,_eE_]);
           case 15:
            var
             menhir_env$0=menhir_env$1,
             menhir_stack$0=menhir_stack$1,
             menhir_s$0=14;
            continue;
           case 16:
            var _eF_=14;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return menhir_run31$0
                      (counter$1,menhir_env$1,menhir_stack$1,_eF_)}
            return caml_trampoline_return
                    (menhir_run31$0,[0,menhir_env$1,menhir_stack$1,_eF_]);
           case 17:
            var _eG_=14;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return menhir_run39$0
                      (counter$0,menhir_env$1,menhir_stack$1,_eG_)}
            return caml_trampoline_return
                    (menhir_run39$0,[0,menhir_env$1,menhir_stack$1,_eG_]);
           default:
            if(menhir_env$1[4])throw [0,Assert_failure,_c1_];
            menhir_env$1[4] = 1;
            return menhir_errorcase(menhir_env$1,menhir_stack$1,14)}
        else
         {if(0 === tok[0])
           {var v=tok[1],_eH_=14;
            if(counter < 50)
             {var counter$3=counter + 1 | 0;
              return menhir_run28$0
                      (counter$3,menhir_env$1,menhir_stack$1,_eH_,v)}
            return caml_trampoline_return
                    (menhir_run28$0,[0,menhir_env$1,menhir_stack$1,_eH_,v])}
          var v$0=tok[1],_eI_=14;
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return menhir_run30$0
                    (counter$2,menhir_env$1,menhir_stack$1,_eI_,v$0)}
          return caml_trampoline_return
                  (menhir_run30$0,[0,menhir_env$1,menhir_stack$1,_eI_,v$0])}}}
    function menhir_run30$0(counter,menhir_env,menhir_stack,menhir_s,_1)
     {var menhir_env$0=menhir_discard(menhir_env),v=[0,_1];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_SimpleExpr
                (counter$0,menhir_env$0,menhir_stack,menhir_s,v)}
      return caml_trampoline_return
              (menhir_goto_SimpleExpr,
               [0,menhir_env$0,menhir_stack,menhir_s,v])}
    function menhir_run31$0(counter,menhir_env,menhir_stack,menhir_s)
     {var
       menhir_stack$0=[0,menhir_stack,menhir_s],
       menhir_env$0=menhir_discard(menhir_env),
       tok=menhir_env$0[3];
      if(typeof tok === "number")
       switch(tok)
        {case 20:
          var _eA_=13;
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return menhir_run23(counter$0,menhir_env$0,menhir_stack$0,_eA_)}
          return caml_trampoline_return
                  (menhir_run23,[0,menhir_env$0,menhir_stack$0,_eA_]);
         case 13:var switch$0=1;break;
         default:var switch$0=0}
      else
       var switch$0=0 === tok[0]?0:1;
      if(switch$0)
       {var _ez_=13;
        if(counter < 50)
         {var counter$1=counter + 1 | 0;
          return menhir_reduce18(counter$1,menhir_env$0,menhir_stack$0,_ez_)}
        return caml_trampoline_return
                (menhir_reduce18,[0,menhir_env$0,menhir_stack$0,_ez_])}
      if(menhir_env$0[4])throw [0,Assert_failure,_c2_];
      menhir_env$0[4] = 1;
      return menhir_errorcase(menhir_env$0,menhir_stack$0,13)}
    function menhir_run39$0(counter,menhir_env,menhir_stack,menhir_s)
     {var menhir_env$0=menhir_discard(menhir_env);
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_SimpleExpr
                (counter$0,menhir_env$0,menhir_stack,menhir_s,v$1)}
      return caml_trampoline_return
              (menhir_goto_SimpleExpr,
               [0,menhir_env$0,menhir_stack,menhir_s,v$1])}
    function menhir_run1(menhir_env,menhir_stack,menhir_s)
     {return caml_trampoline
              (menhir_run1$0(0,menhir_env,menhir_stack,menhir_s))}
    function menhir_run2(menhir_env,menhir_stack,menhir_s)
     {return caml_trampoline
              (menhir_run2$0(0,menhir_env,menhir_stack,menhir_s))}
    function menhir_run22(menhir_env,menhir_stack,menhir_s)
     {return caml_trampoline
              (menhir_run22$0(0,menhir_env,menhir_stack,menhir_s))}
    function menhir_run26(menhir_env,menhir_stack,menhir_s)
     {return caml_trampoline
              (menhir_run26$0(0,menhir_env,menhir_stack,menhir_s))}
    function menhir_run28(menhir_env,menhir_stack,menhir_s,_1)
     {return caml_trampoline
              (menhir_run28$0(0,menhir_env,menhir_stack,menhir_s,_1))}
    function menhir_run29(menhir_env,menhir_stack,menhir_s)
     {return caml_trampoline
              (menhir_run29$0(0,menhir_env,menhir_stack,menhir_s))}
    function menhir_run30(menhir_env,menhir_stack,menhir_s,_1)
     {return caml_trampoline
              (menhir_run30$0(0,menhir_env,menhir_stack,menhir_s,_1))}
    function menhir_run31(menhir_env,menhir_stack,menhir_s)
     {return caml_trampoline
              (menhir_run31$0(0,menhir_env,menhir_stack,menhir_s))}
    function menhir_run39(menhir_env,menhir_stack,menhir_s)
     {return caml_trampoline
              (menhir_run39$0(0,menhir_env,menhir_stack,menhir_s))}
    function menhir_discard(menhir_env)
     {var
       lexer=menhir_env[1],
       lexbuf=menhir_env[2],
       tok=caml_call1(lexer,lexbuf);
      return [0,lexer,lexbuf,tok,0]}
    function toplevel(lexer,lexbuf)
     {var
       menhir_env=[0,lexer,lexbuf,0,0],
       menhir_stack=[0,0,menhir_env[2][12]],
       menhir_env$0=menhir_discard(menhir_env),
       tok=menhir_env$0[3];
      if(typeof tok === "number")
       switch(tok)
        {case 0:return menhir_run1(menhir_env$0,menhir_stack,25);
         case 4:return menhir_run2(menhir_env$0,menhir_stack,25);
         case 8:return menhir_run22(menhir_env$0,menhir_stack,25);
         case 13:return menhir_run26(menhir_env$0,menhir_stack,25);
         case 15:return menhir_run29(menhir_env$0,menhir_stack,25);
         case 16:return menhir_run31(menhir_env$0,menhir_stack,25);
         case 17:return menhir_run39(menhir_env$0,menhir_stack,25);
         default:
          if(menhir_env$0[4])throw [0,Assert_failure,_c3_];
          menhir_env$0[4] = 1;
          return menhir_errorcase(menhir_env$0,menhir_stack,25)}
      else
       {if(0 === tok[0])
         {var v=tok[1];return menhir_run28(menhir_env$0,menhir_stack,25,v)}
        var v$0=tok[1];
        return menhir_run30(menhir_env$0,menhir_stack,25,v$0)}}
    function main$0(counter,lexbuf)
     {var _ey_=0;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return ocaml_lex_main_rec(counter$0,lexbuf,_ey_)}
      return caml_trampoline_return(ocaml_lex_main_rec,[0,lexbuf,_ey_])}
    function ocaml_lex_main_rec(counter,lexbuf,ocaml_lex_state)
     {var ocaml_lex_state$0=ocaml_lex_state;
      for(;;)
       {var
         ocaml_lex_state$1=
          engine(ocaml_lex_tables,ocaml_lex_state$0,lexbuf);
        if(15 < ocaml_lex_state$1 >>> 0)
         {caml_call1(lexbuf[1],lexbuf);
          var ocaml_lex_state$0=ocaml_lex_state$1;
          continue}
        switch(ocaml_lex_state$1)
         {case 0:
           if(counter < 50)
            {var counter$0=counter + 1 | 0;return main$0(counter$0,lexbuf)}
           return caml_trampoline_return(main$0,[0,lexbuf]);
          case 1:return [0,caml_int_of_string(lexeme(lexbuf))];
          case 2:return 13;
          case 3:return 7;
          case 4:return 19;
          case 5:return 6;
          case 6:return 5;
          case 7:return 9;
          case 8:return 12;
          case 9:return 3;
          case 10:return 11;
          case 11:return 2;
          case 12:return 10;
          case 13:return 20;
          case 14:
           var id=lexeme(lexbuf);
           try
            {var _ew_=assoc(id,reservedWords);return _ew_}
           catch(_ex_){return [1,id]}
          default:return exit(0)}}}
    function main(lexbuf){return caml_trampoline(main$0(0,lexbuf))}
    var Type_error=[248,_c4_,caml_fresh_oo_id(0)];
    function is_static_type(param)
     {var param$0=param;
      for(;;)
       {if(typeof param$0 === "number")
         {if(3 === param$0)return 0}
        else
         if(2 === param$0[0])
          {var
            t4=param$0[4],
            t3=param$0[3],
            t2=param$0[2],
            t1=param$0[1],
            _es_=is_static_type(t1);
           if(_es_)
            {var _et_=is_static_type(t2);
             if(_et_)
              {var _eu_=is_static_type(t3);
               if(_eu_){var param$0=t4;continue}
               var _ev_=_eu_}
             else
              var _ev_=_et_}
           else
            var _ev_=_es_;
           return _ev_}
        return 1}}
    function is_tyvar(param)
     {if(typeof param !== "number" && 1 === param[0])return 1;return 0}
    function is_bvp_type(t)
     {if(typeof t === "number")
       if(3 <= t)var switch$0=0;else var _ep_=1,switch$0=1;
      else
       var switch$0=0;
      if(!switch$0)var _ep_=0;
      if(_ep_)
       var _eq_=_ep_;
      else
       {var _er_=is_tyvar(t);
        if(!_er_){if(typeof t !== "number" && 0 === t[0])return 1;return 0}
        var _eq_=_er_}
      return _eq_}
    var compare$1=caml_int_compare,Variables=_w_([0,compare$1]),counter=[0,0];
    function fresh_tyvar(param)
     {var v=counter[1];counter[1] = v + 1 | 0;return [1,v + 1 | 0]}
    function tyvars(param)
     {if(typeof param !== "number")
       switch(param[0])
        {case 1:var x=param[1];return caml_call1(Variables[5],x);
         case 2:
          var
           t4=param[4],
           t3=param[3],
           t2=param[2],
           t1=param[1],
           _el_=tyvars(t2),
           _em_=tyvars(t1),
           vars=caml_call2(Variables[7],_em_,_el_),
           _en_=tyvars(t3),
           vars$0=caml_call2(Variables[7],vars,_en_),
           _eo_=tyvars(t4),
           vars$1=caml_call2(Variables[7],vars$0,_eo_);
          return vars$1
         }
      return Variables[1]}
    var
     counter$0=[0,0],
     compare$2=caml_int_compare,
     TyVarMap=_F_([0,compare$2]);
    function subst_tyvar(t,m)
     {if(typeof t !== "number")
       switch(t[0])
        {case 1:var x=t[1];return caml_call2(TyVarMap[23],x,m);
         case 2:
          var
           t4=t[4],
           t3=t[3],
           t2=t[2],
           t1=t[1],
           _ei_=subst_tyvar(t4,m),
           _ej_=subst_tyvar(t3,m),
           _ek_=subst_tyvar(t2,m);
          return [2,subst_tyvar(t1,m),_ek_,_ej_,_ei_]
         }
      return t}
    function generate_constraints_domf_eq(param)
     {if(typeof param === "number")
       {if(3 === param)return [0,3,Constraints[1]]}
      else
       switch(param[0])
        {case 1:
          var
           x=param[1],
           x4=fresh_tyvar(0),
           x3=fresh_tyvar(0),
           x2=fresh_tyvar(0),
           x1=fresh_tyvar(0);
          return [0,x1,caml_call1(Constraints[5],[0,[1,x],[2,x1,x2,x3,x4]])];
         case 2:var u1=param[1];return [0,u1,Constraints[1]]
         }
      throw [0,Type_error,_c5_]}
    function generate_constraints_domc_eq(param)
     {if(typeof param === "number")
       {if(3 === param)return [0,3,Constraints[1]]}
      else
       switch(param[0])
        {case 1:
          var
           x=param[1],
           x4=fresh_tyvar(0),
           x3=fresh_tyvar(0),
           x2=fresh_tyvar(0),
           x1=fresh_tyvar(0);
          return [0,x3,caml_call1(Constraints[5],[0,[1,x],[2,x1,x2,x3,x4]])];
         case 2:var u3=param[3];return [0,u3,Constraints[1]]
         }
      throw [0,Type_error,_c6_]}
    function generate_constraints_codc_eq(param)
     {if(typeof param === "number")
       {if(3 === param)return [0,3,Constraints[1]]}
      else
       switch(param[0])
        {case 1:
          var
           x=param[1],
           x4=fresh_tyvar(0),
           x3=fresh_tyvar(0),
           x2=fresh_tyvar(0),
           x1=fresh_tyvar(0);
          return [0,x2,caml_call1(Constraints[5],[0,[1,x],[2,x1,x2,x3,x4]])];
         case 2:var u2=param[2];return [0,u2,Constraints[1]]
         }
      throw [0,Type_error,_c7_]}
    function generate_constraints_codf_eq(param)
     {if(typeof param === "number")
       {if(3 === param)return [0,3,Constraints[1]]}
      else
       switch(param[0])
        {case 1:
          var
           x=param[1],
           x4=fresh_tyvar(0),
           x3=fresh_tyvar(0),
           x2=fresh_tyvar(0),
           x1=fresh_tyvar(0);
          return [0,x4,caml_call1(Constraints[5],[0,[1,x],[2,x1,x2,x3,x4]])];
         case 2:var u4=param[4];return [0,u4,Constraints[1]]
         }
      throw [0,Type_error,_c8_]}
    function generate_constraints_domf_con(u1,u2)
     {if(typeof u1 === "number")
       {if(3 === u1)return caml_call1(Constraints[5],[1,u1,u2])}
      else
       switch(u1[0])
        {case 1:
          var
           x=u1[1],
           x4=fresh_tyvar(0),
           x3=fresh_tyvar(0),
           x2=fresh_tyvar(0),
           x1=fresh_tyvar(0),
           c=caml_call1(Constraints[5],[0,[1,x],[2,x1,x2,x3,x4]]);
          return caml_call2(Constraints[4],[1,x1,u2],c);
         case 2:var u11=u1[1];return caml_call1(Constraints[5],[1,u11,u2])
         }
      throw [0,Type_error,_c9_]}
    function generate_constraints_codf_con(u1,u2)
     {if(typeof u1 === "number")
       {if(3 === u1)return caml_call1(Constraints[5],[1,u1,u2])}
      else
       switch(u1[0])
        {case 1:
          var
           x=u1[1],
           x4=fresh_tyvar(0),
           x3=fresh_tyvar(0),
           x2=fresh_tyvar(0),
           x1=fresh_tyvar(0),
           c=caml_call1(Constraints[5],[0,[1,x],[2,x1,x2,x3,x4]]);
          return caml_call2(Constraints[4],[1,x4,u2],c);
         case 2:var u14=u1[4];return caml_call1(Constraints[5],[1,u14,u2])
         }
      throw [0,Type_error,_c__]}
    function generate_constraints_join(u1,match)
     {if(typeof u1 === "number")
       switch(u1)
        {case 0:
          if(typeof match === "number")
           switch(match)
            {case 0:return [0,0,Constraints[1]];
             case 3:var switch$0=0;break;
             default:var switch$0=2}
          else
           var switch$0=1 === match[0]?1:2;
          break;
         case 1:
          if(typeof match === "number")
           switch(match)
            {case 1:return [0,1,Constraints[1]];
             case 3:var switch$0=0;break;
             default:var switch$0=2}
          else
           var switch$0=1 === match[0]?1:2;
          break;
         case 2:
          if(typeof match === "number")
           switch(match)
            {case 2:return [0,2,Constraints[1]];
             case 3:var switch$0=0;break;
             default:var switch$0=2}
          else
           var switch$0=1 === match[0]?1:2;
          break;
         default:var switch$0=0}
      else
       if(2 === u1[0])
        {var _ee_=u1[4],_ef_=u1[3],_eg_=u1[2],_eh_=u1[1];
         if(typeof match === "number")
          if(3 === match)var switch$0=0,switch$1=0;else var switch$1=1;
         else
          switch(match[0])
           {case 0:var switch$1=1;break;
            case 1:var switch$0=1,switch$1=0;break;
            default:
             var
              u24=match[4],
              u23=match[3],
              u22=match[2],
              u21=match[1],
              match$0=generate_constraints_join(_eh_,u21),
              c1=match$0[2],
              u1$0=match$0[1],
              match$1=generate_constraints_join(_eg_,u22),
              c2=match$1[2],
              u2=match$1[1],
              match$2=generate_constraints_join(_ef_,u23),
              c3=match$2[2],
              u3=match$2[1],
              match$3=generate_constraints_join(_ee_,u24),
              c4=match$3[2],
              u4=match$3[1],
              c=caml_call2(Constraints[7],c1,c2),
              c$0=caml_call2(Constraints[7],c,c3),
              c$1=caml_call2(Constraints[7],c$0,c4);
             return [0,[2,u1$0,u2,u3,u4],c$1]}
         if(switch$1)var switch$0=2}
       else
        var switch$0=0;
      switch(switch$0)
       {case 0:
         if(typeof match === "number")
          if(3 <= match)return [0,u1,caml_call1(Constraints[5],[1,u1,3])];
         if(typeof u1 === "number")
          var switch$3=1;
         else
          switch(u1[0])
           {case 2:var switch$3=1;break;
            case 1:return [0,u1,caml_call1(Constraints[5],[1,u1,match])];
            default:var switch$2=0,switch$3=0}
         if(switch$3)return [0,match,caml_call1(Constraints[5],[1,3,match])];
         break;
        case 1:var switch$2=0;break;
        default:var switch$2=1}
      if(!switch$2)
       if(typeof match !== "number" && 1 === match[0])
        return [0,match,caml_call1(Constraints[5],[1,u1,match])];
      throw [0,Type_error,_c$_]}
    function type_of_exp(env,e)
     {function generate_constraints(env,e,b)
       {switch(e[0])
         {case 0:
           var x=e[1];
           try
            {var
              u=caml_call2(Environment[23],x,env),
              _dE_=[0,u,b,Constraints[1]],
              _dD_=_dE_}
           catch(_ec_)
            {_ec_ = caml_wrap_exception(_ec_);
             if(_ec_ !== Not_found)throw _ec_;
             var
              _dC_=[0,Type_error,caml_call1(sprintf(_da_),x)],
              _dD_=function(_ed_){throw _ed_}(_dC_)}
           var match=_dD_;
           break;
          case 1:
           var
            c$0=e[1],
            u$0=typeof c$0 === "number"?2:0 === c$0[0]?0:1,
            match=[0,u$0,b,Constraints[1]];
           break;
          case 2:
           var
            e2=e[3],
            e1=e[2],
            match$0=generate_constraints(env,e1,b),
            c1=match$0[3],
            u_a1=match$0[2],
            u1=match$0[1],
            match$1=generate_constraints(env,e2,u_a1),
            c2=match$1[3],
            u_a2=match$1[2],
            u2=match$1[1],
            _dF_=caml_call1(Constraints[5],[1,u2,1]),
            _dG_=caml_call2(Constraints[4],[1,u1,1],_dF_),
            _dH_=caml_call2(Constraints[7],c2,_dG_),
            c$1=caml_call2(Constraints[7],c1,_dH_),
            match=[0,1,u_a2,c$1];
           break;
          case 3:
           var _dI_=e[1];
           if(_dI_)
            {var _dJ_=e[3],_dK_=e[2],_dL_=_dI_[1];
             if(_dJ_)
              var
               e$0=e[4],
               u_1=_dJ_[1],
               match$2=
                generate_constraints
                 (caml_call3(Environment[4],_dK_,u_1,env),e$0,_dL_),
               c$2=match$2[3],
               u_b=match$2[2],
               u_2=match$2[1],
               _dM_=[0,[2,u_1,u_b,u_2,_dL_],b,c$2];
             else
              var
               e$1=e[4],
               x_x=fresh_tyvar(0),
               match$3=
                generate_constraints
                 (caml_call3(Environment[4],_dK_,x_x,env),e$1,_dL_),
               c$3=match$3[3],
               u_b$0=match$3[2],
               u_2$0=match$3[1],
               _dM_=[0,[2,x_x,u_b$0,u_2$0,_dL_],b,c$3];
             var _dN_=_dM_}
           else
            {var _dO_=e[3],_dP_=e[2];
             if(_dO_)
              var
               e$2=e[4],
               u_1$0=_dO_[1],
               x_g=fresh_tyvar(0),
               match$4=
                generate_constraints
                 (caml_call3(Environment[4],_dP_,u_1$0,env),e$2,x_g),
               c$4=match$4[3],
               u_b$1=match$4[2],
               u_2$1=match$4[1],
               _dQ_=[0,[2,u_1$0,u_b$1,u_2$1,x_g],b,c$4];
             else
              var
               e$3=e[4],
               x_g$0=fresh_tyvar(0),
               x_x$0=fresh_tyvar(0),
               match$5=
                generate_constraints
                 (caml_call3(Environment[4],_dP_,x_x$0,env),e$3,x_g$0),
               c$5=match$5[3],
               u_b$2=match$5[2],
               u$1=match$5[1],
               _dQ_=[0,[2,x_x$0,u_b$2,u$1,x_g$0],b,c$5];
             var _dN_=_dQ_}
           var match=_dN_;
           break;
          case 4:
           var
            e2$0=e[2],
            e1$0=e[1],
            match$6=generate_constraints(env,e1$0,b),
            c1$0=match$6[3],
            u_g=match$6[2],
            u_1$1=match$6[1],
            match$7=generate_constraints(env,e2$0,u_g),
            c2$0=match$7[3],
            u_b$3=match$7[2],
            u_2$2=match$7[1],
            match$8=generate_constraints_domc_eq(u_1$1),
            c3=match$8[2],
            u$2=match$8[1],
            match$9=generate_constraints_codc_eq(u_1$1),
            c4=match$9[2],
            u_a=match$9[1],
            c5=generate_constraints_codf_con(u_1$1,u_b$3),
            c6=generate_constraints_domf_con(u_1$1,u_2$2),
            _dR_=caml_call2(Constraints[7],c5,c6),
            _dS_=caml_call2(Constraints[7],c4,_dR_),
            _dT_=caml_call2(Constraints[7],c3,_dS_),
            _dU_=caml_call2(Constraints[7],c2$0,_dT_),
            c$6=caml_call2(Constraints[7],c1$0,_dU_),
            match=[0,u$2,u_a,c$6];
           break;
          case 5:
           var _dV_=e[2],_dW_=e[1];
           if(_dV_)
            var
             e$4=e[3],
             u_s=_dV_[1],
             match$10=
              generate_constraints
               (caml_call3(Environment[4],_dW_,u_s,env),e$4,b),
             c1$1=match$10[3],
             u_d=match$10[2],
             u_d$0=match$10[1],
             match$11=generate_constraints_domc_eq(u_s),
             c2$1=match$11[2],
             u_a$0=match$11[1],
             match$12=generate_constraints_domf_eq(u_s),
             c3$0=match$12[2],
             u$3=match$12[1],
             match$13=generate_constraints_codc_eq(u_s),
             c4$0=match$13[2],
             u_g1=match$13[1],
             match$14=generate_constraints_codf_eq(u_s),
             c5$0=match$14[2],
             u_g2=match$14[1],
             match$15=generate_constraints_join(u_g1,u_g2),
             c6$0=match$15[2],
             _dX_=caml_call1(Constraints[5],[1,u_d$0,u_d]),
             _dY_=caml_call2(Constraints[7],c6$0,_dX_),
             _dZ_=caml_call2(Constraints[7],c5$0,_dY_),
             _d0_=caml_call2(Constraints[7],c4$0,_dZ_),
             _d1_=caml_call2(Constraints[7],c3$0,_d0_),
             _d2_=caml_call2(Constraints[7],c2$1,_d1_),
             c$7=caml_call2(Constraints[7],c1$1,_d2_),
             _d3_=[0,u$3,u_a$0,c$7];
           else
            var
             e$5=e[3],
             x_g$1=fresh_tyvar(0),
             x_a=fresh_tyvar(0),
             x_x$1=fresh_tyvar(0),
             env$0=
              caml_call3(Environment[4],_dW_,[2,x_x$1,x_g$1,x_a,x_g$1],env),
             match$16=generate_constraints(env$0,e$5,b),
             c$8=match$16[3],
             u_d$1=match$16[2],
             u_d$2=match$16[1],
             c$9=caml_call2(Constraints[4],[1,u_d$2,u_d$1],c$8),
             _d3_=[0,x_x$1,x_a,c$9];
           var match=_d3_;
           break;
          case 6:
           var _d4_=e[2],_d5_=e[1];
           if(_d4_)
            var
             u$4=_d4_[1],
             match$17=generate_constraints(env,_d5_,u$4),
             c$10=match$17[3],
             u_b$4=match$17[2],
             u_b$5=match$17[1],
             c$11=caml_call2(Constraints[4],[1,u_b$5,u_b$4],c$10),
             _d6_=[0,u$4,b,c$11];
           else
            var
             x_x$2=fresh_tyvar(0),
             match$18=generate_constraints(env,_d5_,x_x$2),
             c$12=match$18[3],
             u_b$6=match$18[2],
             u_b$7=match$18[1],
             c$13=caml_call2(Constraints[4],[1,u_b$7,u_b$6],c$12),
             _d6_=[0,x_x$2,b,c$13];
           var match=_d6_;
           break;
          case 7:
           var
            e3=e[3],
            e2$1=e[2],
            e1$1=e[1],
            match$19=generate_constraints(env,e1$1,b),
            c1$2=match$19[3],
            u_d$3=match$19[2],
            u_1$2=match$19[1],
            match$20=generate_constraints(env,e2$1,u_d$3),
            c2$2=match$20[3],
            u_a2$0=match$20[2],
            u_2$3=match$20[1],
            match$21=generate_constraints(env,e3,u_d$3),
            c3$1=match$21[3],
            u_a3=match$21[2],
            u_3=match$21[1],
            match$22=generate_constraints_join(u_a2$0,u_a3),
            c4$1=match$22[2],
            u_a$1=match$22[1],
            match$23=generate_constraints_join(u_2$3,u_3),
            c5$1=match$23[2],
            u$5=match$23[1],
            _d7_=caml_call1(Constraints[5],[1,u_1$2,0]),
            _d8_=caml_call2(Constraints[7],c5$1,_d7_),
            _d9_=caml_call2(Constraints[7],c4$1,_d8_),
            _d__=caml_call2(Constraints[7],c3$1,_d9_),
            _d$_=caml_call2(Constraints[7],c2$2,_d__),
            c$14=caml_call2(Constraints[7],c1$2,_d$_),
            match=[0,u$5,u_a$1,c$14];
           break;
          default:
           var
            e2$2=e[2],
            e1$2=e[1],
            match$24=generate_constraints(env,e1$2,b),
            c1$3=match$24[3],
            u_b$8=match$24[2],
            u_1$3=match$24[1],
            match$25=generate_constraints(env,e2$2,u_b$8),
            c2$3=match$25[3],
            u_a$2=match$25[2],
            u_2$4=match$25[1],
            _ea_=caml_call1(Constraints[5],[1,u_1$3,2]),
            _eb_=caml_call2(Constraints[7],c2$3,_ea_),
            c$15=caml_call2(Constraints[7],c1$3,_eb_),
            match=[0,u_2$4,u_a$2,c$15]}
        var c=match[3],a=match[2],t=match[1];
        return [0,t,a,c]}
      var
       match=generate_constraints(env,e,fresh_tyvar(0)),
       c=match[3],
       u=match[1];
      function unify(c)
       {var c$0=c;
        for(;;)
         {if(c$0)
           {var c$1=c$0[2],constr=c$0[1];
            if(0 === constr[0])
             {var t1=constr[1],t2=constr[2];
              if(caml_equal(t1,t2))
               if(is_static_type(t1))if(is_bvp_type(t1)){var c$0=c$1;continue}
              if(typeof t2 === "number")
               var switch$0=0;
              else
               if(1 === t2[0])
                {var x$0=t2[1];
                 if(is_static_type(t1))
                  if(!is_tyvar(t1))
                   {var c$3=[0,[0,[1,x$0],t1],c$1],c$0=c$3;continue}
                 var switch$0=1}
               else
                var switch$0=0;
              if(typeof t1 === "number")
               var switch$1=0;
              else
               switch(t1[0])
                {case 0:var switch$1=0;break;
                 case 1:
                  var t=constr[2],x=t1[1],_do_=tyvars(t);
                  if(1 - caml_call2(Variables[3],x,_do_))
                   {var
                     s=
                      unify
                       (map
                         (function(param)
                           {if(0 === param[0])
                             {var u2=param[2],u1=param[1],_dx_=subst_type(x,t,u2);
                              return [0,subst_type(x,t,u1),_dx_]}
                            var u2$0=param[2],u1$0=param[1],_dy_=subst_type(x,t,u2$0);
                            return [1,subst_type(x,t,u1$0),_dy_]},
                          c$1));
                    return [0,[0,x,t],s]}
                  var switch$1=1;
                  break;
                 default:
                  var _dp_=constr[2];
                  if(typeof _dp_ === "number")
                   var switch$2=1;
                  else
                   if(2 === _dp_[0])
                    {var
                      t24=_dp_[4],
                      t23=_dp_[3],
                      t22=_dp_[2],
                      t21=_dp_[1],
                      t14=t1[4],
                      t13=t1[3],
                      t12=t1[2],
                      t11=t1[1],
                      types=
                       [0,
                        t11,
                        [0,t12,[0,t13,[0,t14,[0,t21,[0,t22,[0,t23,[0,t24,0]]]]]]]],
                      _dl_=map(is_static_type,types),
                      _dm_=1;
                     if
                      (fold_left
                        (function(_dA_,_dz_){var _dB_=_dA_?_dz_:_dA_;return _dB_},
                         _dm_,
                         _dl_))
                      {var
                        c$2=
                         [0,
                          [0,t11,t21],
                          [0,[0,t12,t22],[0,[0,t13,t23],[0,[0,t14,t24],c$1]]]],
                        c$0=c$2;
                       continue}
                     var switch$1=1,switch$2=0}
                   else
                    var switch$2=1;
                  if(switch$2)var switch$1=1}}
            else
             {var u1$1=constr[1],u2$1=constr[2];
              if(caml_equal(u1$1,u2$1))
               if(is_bvp_type(u1$1)){var c$0=c$1;continue}
              var switch$3=typeof u2$1 === "number"?3 <= u2$1?1:0:0;
              if(switch$3)
               var switch$4=1;
              else
               {if(typeof u1$1 === "number")
                 if(3 === u1$1)var switch$4=1,switch$5=0;else var switch$5=1;
                else
                 if(2 === u1$1[0])
                  {var
                    _ds_=constr[2],
                    _dt_=u1$1[4],
                    _du_=u1$1[3],
                    _dv_=u1$1[2],
                    _dw_=u1$1[1];
                   if(typeof _ds_ === "number")
                    var switch$6=1;
                   else
                    switch(_ds_[0])
                     {case 0:var switch$6=1;break;
                      case 1:var switch$5=1,switch$6=0;break;
                      default:
                       var
                        u24=_ds_[4],
                        u23=_ds_[3],
                        u22=_ds_[2],
                        u21=_ds_[1],
                        c$7=
                         [0,
                          [1,_dw_,u21],
                          [0,[1,_dv_,u22],[0,[1,_du_,u23],[0,[1,_dt_,u24],c$1]]]],
                        c$0=c$7;
                       continue}
                   if(switch$6)var switch$4=0,switch$5=0}
                 else
                  var switch$5=1;
                if(switch$5)
                 {var _dq_=constr[2];
                  if(typeof _dq_ === "number")
                   var switch$7=0;
                  else
                   if(1 === _dq_[0])
                    {var x$2=_dq_[1];
                     if(1 - is_tyvar(u1$1))
                      {var c$6=[0,[1,[1,x$2],u1$1],c$1],c$0=c$6;continue}
                     var switch$7=1}
                   else
                    var switch$7=0;
                  if(typeof u1$1 === "number")
                   var switch$8=1;
                  else
                   if(1 === u1$1[0])
                    {var u=constr[2],x$1=u1$1[1];
                     if(is_bvp_type(u))
                      {var c$4=[0,[0,[1,x$1],u],c$1],c$0=c$4;continue}
                     if(typeof u === "number")
                      var switch$9=1;
                     else
                      if(2 === u[0])
                       {var
                         u4=u[4],
                         u3=u[3],
                         u2$2=u[2],
                         u1$2=u[1],
                         _dr_=tyvars([2,u1$2,u2$2,u3,u4]);
                        if(1 - caml_call2(Variables[3],x$1,_dr_))
                         {var
                           x4=fresh_tyvar(0),
                           x3=fresh_tyvar(0),
                           x2=fresh_tyvar(0),
                           x1=fresh_tyvar(0),
                           c$5=
                            [0,
                             [0,[1,x$1],[2,x1,x2,x3,x4]],
                             [0,
                              [1,x1,u1$2],
                              [0,[1,x2,u2$2],[0,[1,x3,u3],[0,[1,x4,u4],c$1]]]]],
                           c$0=c$5;
                          continue}
                        var switch$4=0,switch$8=0,switch$9=0}
                      else
                       var switch$9=1;
                     if(switch$9)var switch$4=0,switch$8=0}
                   else
                    var switch$8=1;
                  if(switch$8)var switch$4=0}}
              if(switch$4){var c$0=c$1;continue}}
            if(0 === constr[0])
             var
              u2=constr[2],
              u1=constr[1],
              _dj_=_a_(_bO_,string_of_type(u2)),
              _dn_=_a_(string_of_type(u1),_dj_);
            else
             var
              u2$0=constr[2],
              u1$0=constr[1],
              _dk_=_a_(_bP_,string_of_type(u2$0)),
              _dn_=_a_(string_of_type(u1$0),_dk_);
            throw [0,Type_error,_a_(_db_,_dn_)]}
          return 0}}
      var _df_=0;
      function _dg_(x,l){return [0,x,l]}
      var
       s=unify(caml_call3(Constraints[15],_dg_,c,_df_)),
       t=
        fold_left
         (function(u,param)
           {var t=param[2],x=param[1];return subst_type(x,t,u)},
          u,
          s);
      function f(x,m)
       {if(caml_call2(TyVarMap[3],x,m))return m;
        var v=counter$0[1];
        counter$0[1] = v + 1 | 0;
        return caml_call3(TyVarMap[4],x,[0,v + 1 | 0],m)}
      var _dh_=TyVarMap[1],_di_=tyvars(t);
      return subst_tyvar(t,caml_call3(Variables[15],f,_di_,_dh_))}
    function t11(param,x)
     {var empty=Environment[1];
      try
       {var
         x$0=caml_js_to_string(x),
         e=toplevel(main,from_string(x$0)),
         s=string_of_type(type_of_exp(empty,e)),
         _de_={"isSucceeded":true$0,"result":s.toString()};
        return _de_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Failure)
         {var message=exn[2];
          return {"isSucceeded":false$0,
                  "result":caml_call1(sprintf(_dc_),message).toString()}}
        if(exn === eRR)return {"isSucceeded":false$0,"result":"Parser.Error"};
        if(exn[1] === Type_error)
         {var message$0=exn[2];
          return {"isSucceeded":false$0,
                  "result":caml_call1(sprintf(_dd_),message$0).toString()}}
        return {"isSucceeded":false$0,"result":"Unexpected error"}}}
    var x={"infer":caml_js_wrap_meth_callback(t11)};
    caml_js_export_var(0).GsrInfer = x;
    do_at_exit(0);
    return}
  (function(){return this}()));
